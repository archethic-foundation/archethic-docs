"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[3034],{3905:(t,e,n)=>{n.d(e,{Zo:()=>u,kt:()=>f});var a=n(67294);function r(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function s(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(t);e&&(a=a.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,a)}return n}function c(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?s(Object(n),!0).forEach((function(e){r(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function o(t,e){if(null==t)return{};var n,a,r=function(t,e){if(null==t)return{};var n,a,r={},s=Object.keys(t);for(a=0;a<s.length;a++)n=s[a],e.indexOf(n)>=0||(r[n]=t[n]);return r}(t,e);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(t);for(a=0;a<s.length;a++)n=s[a],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(r[n]=t[n])}return r}var i=a.createContext({}),l=function(t){var e=a.useContext(i),n=e;return t&&(n="function"==typeof t?t(e):c(c({},e),t)),n},u=function(t){var e=l(t.components);return a.createElement(i.Provider,{value:e},t.children)},d="mdxType",p={inlineCode:"code",wrapper:function(t){var e=t.children;return a.createElement(a.Fragment,{},e)}},m=a.forwardRef((function(t,e){var n=t.components,r=t.mdxType,s=t.originalType,i=t.parentName,u=o(t,["components","mdxType","originalType","parentName"]),d=l(n),m=r,f=d["".concat(i,".").concat(m)]||d[m]||p[m]||s;return n?a.createElement(f,c(c({ref:e},u),{},{components:n})):a.createElement(f,c({ref:e},u))}));function f(t,e){var n=arguments,r=e&&e.mdxType;if("string"==typeof t||r){var s=n.length,c=new Array(s);c[0]=m;var o={};for(var i in e)hasOwnProperty.call(e,i)&&(o[i]=e[i]);o.originalType=t,o[d]="string"==typeof t?t:r,c[1]=o;for(var l=2;l<s;l++)c[l]=n[l];return a.createElement.apply(null,c)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},85162:(t,e,n)=>{n.d(e,{Z:()=>c});var a=n(67294),r=n(86010);const s={tabItem:"tabItem_Ymn6"};function c(t){let{children:e,hidden:n,className:c}=t;return a.createElement("div",{role:"tabpanel",className:(0,r.Z)(s.tabItem,c),hidden:n},e)}},74866:(t,e,n)=>{n.d(e,{Z:()=>w});var a=n(87462),r=n(67294),s=n(86010),c=n(12466),o=n(16550),i=n(91980),l=n(67392),u=n(50012);function d(t){return function(t){return r.Children.map(t,(t=>{if(!t||(0,r.isValidElement)(t)&&function(t){const{props:e}=t;return!!e&&"object"==typeof e&&"value"in e}(t))return t;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof t.type?t.type:t.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}(t).map((t=>{let{props:{value:e,label:n,attributes:a,default:r}}=t;return{value:e,label:n,attributes:a,default:r}}))}function p(t){const{values:e,children:n}=t;return(0,r.useMemo)((()=>{const t=e??d(n);return function(t){const e=(0,l.l)(t,((t,e)=>t.value===e.value));if(e.length>0)throw new Error(`Docusaurus error: Duplicate values "${e.map((t=>t.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(t),t}),[e,n])}function m(t){let{value:e,tabValues:n}=t;return n.some((t=>t.value===e))}function f(t){let{queryString:e=!1,groupId:n}=t;const a=(0,o.k6)(),s=function(t){let{queryString:e=!1,groupId:n}=t;if("string"==typeof e)return e;if(!1===e)return null;if(!0===e&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:e,groupId:n});return[(0,i._X)(s),(0,r.useCallback)((t=>{if(!s)return;const e=new URLSearchParams(a.location.search);e.set(s,t),a.replace({...a.location,search:e.toString()})}),[s,a])]}function g(t){const{defaultValue:e,queryString:n=!1,groupId:a}=t,s=p(t),[c,o]=(0,r.useState)((()=>function(t){let{defaultValue:e,tabValues:n}=t;if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(e){if(!m({value:e,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${e}" but none of its children has the corresponding value. Available values are: ${n.map((t=>t.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return e}const a=n.find((t=>t.default))??n[0];if(!a)throw new Error("Unexpected error: 0 tabValues");return a.value}({defaultValue:e,tabValues:s}))),[i,l]=f({queryString:n,groupId:a}),[d,g]=function(t){let{groupId:e}=t;const n=function(t){return t?`docusaurus.tab.${t}`:null}(e),[a,s]=(0,u.Nk)(n);return[a,(0,r.useCallback)((t=>{n&&s.set(t)}),[n,s])]}({groupId:a}),h=(()=>{const t=i??d;return m({value:t,tabValues:s})?t:null})();(0,r.useLayoutEffect)((()=>{h&&o(h)}),[h]);return{selectedValue:c,selectValue:(0,r.useCallback)((t=>{if(!m({value:t,tabValues:s}))throw new Error(`Can't select invalid tab value=${t}`);o(t),l(t),g(t)}),[l,g,s]),tabValues:s}}var h=n(72389);const y={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};function b(t){let{className:e,block:n,selectedValue:o,selectValue:i,tabValues:l}=t;const u=[],{blockElementScrollPositionUntilNextRender:d}=(0,c.o5)(),p=t=>{const e=t.currentTarget,n=u.indexOf(e),a=l[n].value;a!==o&&(d(e),i(a))},m=t=>{let e=null;switch(t.key){case"Enter":p(t);break;case"ArrowRight":{const n=u.indexOf(t.currentTarget)+1;e=u[n]??u[0];break}case"ArrowLeft":{const n=u.indexOf(t.currentTarget)-1;e=u[n]??u[u.length-1];break}}e?.focus()};return r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,s.Z)("tabs",{"tabs--block":n},e)},l.map((t=>{let{value:e,label:n,attributes:c}=t;return r.createElement("li",(0,a.Z)({role:"tab",tabIndex:o===e?0:-1,"aria-selected":o===e,key:e,ref:t=>u.push(t),onKeyDown:m,onClick:p},c,{className:(0,s.Z)("tabs__item",y.tabItem,c?.className,{"tabs__item--active":o===e})}),n??e)})))}function v(t){let{lazy:e,children:n,selectedValue:a}=t;const s=(Array.isArray(n)?n:[n]).filter(Boolean);if(e){const t=s.find((t=>t.props.value===a));return t?(0,r.cloneElement)(t,{className:"margin-top--md"}):null}return r.createElement("div",{className:"margin-top--md"},s.map(((t,e)=>(0,r.cloneElement)(t,{key:e,hidden:t.props.value!==a}))))}function k(t){const e=g(t);return r.createElement("div",{className:(0,s.Z)("tabs-container",y.tabList)},r.createElement(b,(0,a.Z)({},t,e)),r.createElement(v,(0,a.Z)({},t,e)))}function w(t){const e=(0,h.Z)();return r.createElement(k,(0,a.Z)({key:String(e)},t))}},47036:(t,e,n)=>{n.r(e),n.d(e,{assets:()=>u,contentTitle:()=>i,default:()=>f,frontMatter:()=>o,metadata:()=>l,toc:()=>d});var a=n(87462),r=(n(67294),n(3905)),s=(n(8209),n(74866)),c=n(85162);const o={id:"getting-started",title:"Getting Started",sidebar_position:2},i=void 0,l={unversionedId:"build/smart-contracts/wasm/getting-started",id:"build/smart-contracts/wasm/getting-started",title:"Getting Started",description:"This guide explains how to create your first smart contract and deploy it on the Archethic testnet.",source:"@site/docs/build/smart-contracts/wasm/getting_started.md",sourceDirName:"build/smart-contracts/wasm",slug:"/build/smart-contracts/wasm/getting-started",permalink:"/build/smart-contracts/wasm/getting-started",draft:!1,tags:[],version:"current",lastUpdatedAt:1743006741,formattedLastUpdatedAt:"Mar 26, 2025",sidebarPosition:2,frontMatter:{id:"getting-started",title:"Getting Started",sidebar_position:2},sidebar:"docs",previous:{title:"Runtime",permalink:"/build/smart-contracts/wasm/runtime"},next:{title:"SDK",permalink:"/category/sdk"}},u={},d=[{value:"Setup",id:"setup",level:2},{value:"Prerequisites",id:"prerequisites",level:3},{value:"Create a new project",id:"create-a-new-project",level:3},{value:"Install SDK",id:"install-sdk",level:3},{value:"Writing your first contract",id:"writing-your-first-contract",level:2},{value:"Test &amp; Simulation",id:"test--simulation",level:2},{value:"Simulate state",id:"simulate-state",level:3},{value:"Simulate constants",id:"simulate-constants",level:3},{value:"Mock Blockchain Calls",id:"mock-blockchain-calls",level:3},{value:"Deployment",id:"deployment",level:2},{value:"Upgrading Contracts",id:"upgrading-contracts",level:2}],p={toc:d},m="wrapper";function f(t){let{components:e,...n}=t;return(0,r.kt)(m,(0,a.Z)({},p,n,{components:e,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"This guide explains how to create your first smart contract and deploy it on the Archethic testnet."),(0,r.kt)("h2",{id:"setup"},"Setup"),(0,r.kt)("p",null,"Before creating a smart contract, set up your development environment to use WebAssembly (WASM)."),(0,r.kt)(s.Z,{mdxType:"Tabs"},(0,r.kt)(c.Z,{value:"assemblyscript",label:"AssemblyScript SDK",default:!0,mdxType:"TabItem"},(0,r.kt)("p",null,"  You need to have NodeJS & npm installed"),(0,r.kt)("h3",{id:"prerequisites"},"Prerequisites"),(0,r.kt)("p",null,"  Ensure you have Node.js and npm installed."),(0,r.kt)("h3",{id:"create-a-new-project"},"Create a new project"),(0,r.kt)("p",null,"  Run the following command to create a new project:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"npm create @archethicjs/ae-contract-as my_contract\n")),(0,r.kt)("p",null,"  This creates a new project in the my_contract folder with the following structure:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"my_contract/\n\u251c\u2500\u2500 assembly/\n\u2502   \u251c\u2500\u2500 index.ts         # Main contract code\n\u2502   \u251c\u2500\u2500 tsconfig.json    # Typescript configuration for AssemblyScript\n\u251c\u2500\u2500 tests\n    \u251c\u2500\u2500 index.test.ts    # Main test file\n\u251c\u2500\u2500 asconfig.json        # AssemblyScript configuration\n\u251c\u2500\u2500 package.json         # Project dependencies and scripts\n\u251c\u2500\u2500 README.md            # Project documentation\n\u2514\u2500\u2500 tsconfig.json        # TypeScript configuration\n")),(0,r.kt)("h3",{id:"install-sdk"},"Install SDK"),(0,r.kt)("p",null,"  Navigate to your project folder and install the SDK:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"cd my_contract\nnpm install\n")))),(0,r.kt)("h2",{id:"writing-your-first-contract"},"Writing your first contract"),(0,r.kt)(s.Z,{mdxType:"Tabs"},(0,r.kt)(c.Z,{value:"assemblyscript",label:"AssemblyScript SDK",default:!0,mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="/assembly/index.ts"',title:'"/assembly/index.ts"'},'import {\n    ActionResult,\n    Context,\n    ContextWithParams,\n    TriggerType,\n} from "@archethicjs/ae-contract-as/assembly";\n\n// Define the contract state\nclass State {\n    counter: i32 = 0;\n}\n\n// Initialize the contract during creation\nexport function onInit(context: Context<State>): State {\n    return new State();\n}\n\nclass IncArgs {\n    value!: u32;\n}\n\n// Define an action triggered by a transaction\n@action(TriggerType.Transaction)\nexport function inc(context: ContextWithParams<State, IncArgs>): ActionResult<State> {\n    const state = context.state;\n\n    // Validate the input\n    if (context.arguments.value == 0)\n        throw new Error("increment value must be greater than 0")\n\n    // Update the state\n    state.counter += context.arguments.value;\n\n    // Return the updated state\n    return new ActionResult<State>().setState(state)\n}\n')),(0,r.kt)("p",null,"In this example, the inc function expects an argument to increment the contract's state with each incoming transaction."))),(0,r.kt)("h2",{id:"test--simulation"},"Test & Simulation"),(0,r.kt)("p",null,"Contract tests simulate the execution of WASM modules as the blockchain runtime would. Use the ",(0,r.kt)("inlineCode",{parentName:"p"},"tests")," folder to define test cases."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="/tests/index.test.ts"',title:'"/tests/index.test.ts"'},'import { describe, it, expect } from \'vitest\'\nimport { readFileSync } from "fs";\nimport { getContract } from "@archethicjs/ae-contract-test";\n\ndescribe("inc", () => {\n    it("should increment the state", async () => {\n        const wasmBuffer = readFileSync("./dist/contract.wasm");\n        const contract = await getContract(wasmBuffer);\n\n        // Increment from an undefined state\n        let result = contract.inc({ value: 1 });\n        expect(result?.state.counter).toBe(1);\n\n        // Increment from a computed state\n        result = contract.inc({ value: 1 });\n        expect(result?.state.counter).toBe(2);\n\n        // Increment with a predefined state\n        result = contract.inc({ value: 1 }, { state: { counter: 2 } });\n        expect(result?.state.counter).toBe(3);\n    });\n});\n')),(0,r.kt)("h3",{id:"simulate-state"},"Simulate state"),(0,r.kt)("p",null,"To simulate a specific state of the contract - in order to speed up the setup - you can hardcode it in the tests"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="Example of test simulating state"',title:'"Example',of:!0,test:!0,simulating:!0,'state"':!0},'it("should increment with state", async () => {\n  const wasmBuffer = readFileSync("./dist/contract.wasm");\n  const contract = await getContract(wasmBuffer);\n\n  // Simulate a specific initial state\n  const result = contract.inc({ state: { counter: 2 } });\n  expect(result?.state.counter).toBe(3);\n});\n')),(0,r.kt)("h3",{id:"simulate-constants"},"Simulate constants"),(0,r.kt)("p",null,"To simulate constants such as contract address, genesis, balance, etc.., you can hardcode them in the tests"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="Example of test simulating state"',title:'"Example',of:!0,test:!0,simulating:!0,'state"':!0},'it("should display balance as input", async () => {\n  const wasmBuffer = readFileSync("./dist/contract.wasm");\n\n  const contract = await getContract(wasmBuffer);\n  const result = contract.currentBalance({\n    balance: {\n      uco: 100_000_000\n    }\n  })\n  expect(result).toBe(\'UCO: 100000000\')\n})\n')),(0,r.kt)("h3",{id:"mock-blockchain-calls"},"Mock Blockchain Calls"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="Example of test using mock"',title:'"Example',of:!0,test:!0,using:!0,'mock"':!0},'it("should fetch balance", async () => {\n  const wasmBuffer = readFileSync("./dist/contract.wasm");\n  const contract = await getContract(wasmBuffer);\n\n  const address = new Address("0000583a6a1d9a536ed7f3c8e7f3981ed2f7ff8cb3c3f8f2b9eb0c862d81f75d28cb")\n\n  // We simulate getBalance call\n  const contract = await getContract(wasmBuffer, {\n    ioMocks: {\n      getBalance(requestedAddress: Address): Balance {\n        if (Address.compare(requestedAddress, address)) {\n          return { uco: 100_000_000, token: [] }\n        }\n        return { uco: 0, token: [] }\n      }\n    }\n  });\n\n  const result = contract.fetchBalance({ address: address })\n  expect(result).toBe(\'UCO: 100000000\')\n});\n')),(0,r.kt)("h2",{id:"deployment"},"Deployment"),(0,r.kt)("p",null,"Configure your deployment environment by creating the following file:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="/archethic.config.js"',title:'"/archethic.config.js"'},'export default {\n  endpoint: process.env["ENDPOINT"] || "https://testnet.archethic.net"\n  seed: process.env["SEED"], // Optional if using the Archethic wallet\n}\n')),(0,r.kt)("p",null,"Then, we need to create a script to implement the deployment and execute the transactions"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript",metastring:'title="/scripts/deploy.js"',title:'"/scripts/deploy.js"'},'import { getContext } from "@archethicjs/ae-contract-test"\nimport { Utils } from "@archethicjs/sdk"\n\nasync function main() {\n  const ctx = await getContext()\n  const fundingAccount = await ctx.getAccount()\n\n  // Request testnet funds\n  await fundingAccount.requestFaucet()\n\n  const contractAccount = ctx.getRandomAccount()\n\n  // Fund the contract\'s chain\n  const fundingTx = ctx.archethicClient.transaction.new()\n  .setType("transfer")\n  .addUCOTransfer(contractAccount.address, Utils.parseBigInt("1"))\n\n  console.log("Funding contract...")\n  await fundingAccount.sendTransaction(fundingTx)\n\n  console.log("Deploying contract...")\n  const transactionAddress = await ctx.deployContract(contractAccount)\n\n  console.log(`Contract deployed at: ${transactionAddress}`)\n  process.exit(0)\n}\n\nmain().catch((error) => {\n  console.error(error);\n  process.exit(1)\n});\n')),(0,r.kt)("p",null,"We can finally execute them"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"node scripts/deploy.js\n")),(0,r.kt)("admonition",{type:"success"},(0,r.kt)("p",{parentName:"admonition"},"Congratulations! Your first Archethic WASM contract is now live")),(0,r.kt)("h2",{id:"upgrading-contracts"},"Upgrading Contracts"),(0,r.kt)("p",null,"To allow upgrades, specify an authorized address in the configuration:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="/archethic.config.js"',title:'"/archethic.config.js"'},'export default {\n  endpoint: process.env["ENDPOINT"] || "https://testnet.archethic.net"\n  seed: process.env["SEED"],\n  upgradeAddress: "0000..." // Address authorized for upgrades\n}\n')),(0,r.kt)("p",null,"Create an upgrade script:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript",metastring:'title="/scripts/upgrade.js"',title:'"/scripts/upgrade.js"'},'import { getContext, getUpgradeContractTx } from "@archethicjs/ae-contract-test"\n\nasync function main() {\n  const ctx = await getContext()\n\n  if (process.env["CONTRACT"] === undefined) {\n    throw new Error("CONTRACT env var is required")\n  }\n\n  const fundingAccount = await ctx.getAccount()\n  const contractAddress = process.env["CONTRACT"]\n\n  console.log(`Upgrading contract ${contractAddress}`)\n\n  await ctx.updateContract(fundingAccount, contractAddress)\n\n  console.log("Contract upgraded")\n  process.exit(0)\n}\n\nmain().catch((error) => {\n  console.error(error);\n  process.exit(1)\n});\n')),(0,r.kt)("p",null,"Run the upgrade script:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"CONTRACT=ADDRESS_OF_THE_DEPLOYED_CONTRACT node scripts/upgrade.js\n")))}f.isMDXComponent=!0},8209:(t,e,n)=>{n(67294)}}]);