"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[9308],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>k});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),c=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},p=function(e){var t=c(e.components);return a.createElement(l.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),u=c(n),d=r,k=u["".concat(l,".").concat(d)]||u[d]||m[d]||i;return n?a.createElement(k,s(s({ref:t},p),{},{components:n})):a.createElement(k,s({ref:t},p))}));function k(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,s=new Array(i);s[0]=d;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o[u]="string"==typeof e?e:r,s[1]=o;for(var c=2;c<i;c++)s[c]=n[c];return a.createElement.apply(null,s)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},54510:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>m,frontMatter:()=>i,metadata:()=>o,toc:()=>c});var a=n(87462),r=(n(67294),n(3905));n(8209);const i={id:"assemblyscript",title:"AssemblyScript"},s=void 0,o={unversionedId:"build/smart-contracts/wasm/sdk/assemblyscript",id:"build/smart-contracts/wasm/sdk/assemblyscript",title:"AssemblyScript",description:"AssemblyScript is a TypeScript-like language targeting WebAssembly's feature set specifically, giving developers low-level control over their code.",source:"@site/docs/build/smart-contracts/wasm/sdk/assemblyscript.md",sourceDirName:"build/smart-contracts/wasm/sdk",slug:"/build/smart-contracts/wasm/sdk/assemblyscript",permalink:"/build/smart-contracts/wasm/sdk/assemblyscript",draft:!1,tags:[],version:"current",lastUpdatedAt:1743006741,formattedLastUpdatedAt:"Mar 26, 2025",frontMatter:{id:"assemblyscript",title:"AssemblyScript"},sidebar:"docs",previous:{title:"SDK",permalink:"/category/sdk"},next:{title:"Interpreter (Deprecated)",permalink:"/build/smart-contracts/language/"}},l={},c=[{value:"Features",id:"features",level:2},{value:"Installation",id:"installation",level:2},{value:"Usage",id:"usage",level:2},{value:"Action definition",id:"action-definition",level:3},{value:"TriggerType Options",id:"triggertype-options",level:3},{value:"Readonly functions definition",id:"readonly-functions-definition",level:3},{value:"Function parameters",id:"function-parameters",level:3},{value:"Transaction builder",id:"transaction-builder",level:3},{value:"API",id:"api",level:4},{value:"Library (Host functions)",id:"library-host-functions",level:3},{value:"Blockchain fetching",id:"blockchain-fetching",level:4},{value:"Crypto operations",id:"crypto-operations",level:4},{value:"Contract interaction",id:"contract-interaction",level:4},{value:"HTTP requests",id:"http-requests",level:4},{value:"Errors",id:"errors",level:3},{value:"Binaries",id:"binaries",level:3},{value:"Best pratices",id:"best-pratices",level:3},{value:"Tests",id:"tests",level:2},{value:"CLI",id:"cli",level:2},{value:"Build",id:"build",level:3},{value:"Manifest generation",id:"manifest-generation",level:4},{value:"Release mode",id:"release-mode",level:4},{value:"Deploy",id:"deploy",level:3}],p={toc:c},u="wrapper";function m(e){let{components:t,...n}=e;return(0,r.kt)(u,(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"AssemblyScript is a TypeScript-like language targeting WebAssembly's feature set specifically, giving developers low-level control over their code."),(0,r.kt)("p",{parentName:"admonition"},"Its similarity with TypeScript makes it easy to compile to WebAssembly without learning a new language and\nintegrates with the existing Web ecosystem - no heavy toolchains to set up. ")),(0,r.kt)("p",null,"AssemblyScript SDK designed for developing smart contracts on the Archethic Public Blockchain."),(0,r.kt)("h2",{id:"features"},"Features"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Peace of mind: Abstract WASM in/out complexity by providing a simple API and decorators"),(0,r.kt)("li",{parentName:"ul"},"Integrated hooks: Reserved functions (onInit, onUpgrade) to leverage blockchain hooks"),(0,r.kt)("li",{parentName:"ul"},"Typed language: Built on AssemblyScript, a TypeScript-like language"),(0,r.kt)("li",{parentName:"ul"},"Build-in specification: Integrate a manifest generation to export types and ABI"),(0,r.kt)("li",{parentName:"ul"},"Tooling: SDK provides CLI & Test framework to start in minutes smart contract development")),(0,r.kt)("h2",{id:"installation"},"Installation"),(0,r.kt)("p",null,"Generate a new project by using the following commands"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"npm create @archethicjs/ae-contract-as my-smart-contract\ncd my-smart-contract\nnpm install\n")),(0,r.kt)("h2",{id:"usage"},"Usage"),(0,r.kt)("p",null,"The SDK abstract communication with the WebAssembly host and provide a set of functions and classes."),(0,r.kt)("h3",{id:"action-definition"},"Action definition"),(0,r.kt)("p",null,"To define a action executed from a trigger coming from transaction or self-triggered, you have to create a exported function\nannotated as ",(0,r.kt)("inlineCode",{parentName:"p"},"@action")," with the corresponding trigger (",(0,r.kt)("inlineCode",{parentName:"p"},"TriggerType"),")."),(0,r.kt)("p",null,"The function must return  ",(0,r.kt)("inlineCode",{parentName:"p"},"ActionResult<T>")," object to return new state and/or new transaction."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="/assembly/index.ts"',title:'"/assembly/index.ts"'},'@action(TriggerType.Interval, "0 0 * * *") // Executes daily at midnight\nexport function tick(ctx: Context<State>): ActionResult<State> {\n  // Create a new transaction with content "tick"\n  return new ActionResult<State>().setTransaction(\n    new TransactionBuilder()\n      .setContent("tick")\n  );\n}\n')),(0,r.kt)("p",null,"To use a self-triggered you have to pass a parameter to the ",(0,r.kt)("inlineCode",{parentName:"p"},"@action")," decorator"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript",metastring:"title=/assembly/index.ts",title:"/assembly/index.ts"},'@action(TriggerType.Interval, "0 0 * * *")\nexport function tick(ctx: Context<State>): ActionResult<State> {\n  return new ActionResult<State>().setTransaction(\n    return new TransactionBuilder()\n      .setContent("tick")\n  )\n}\n')),(0,r.kt)("h3",{id:"triggertype-options"},"TriggerType Options"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Transaction"),": Executes the action when a transaction targets the smart contract."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Interval"),": Executes the action at specified time intervals. Requires a valid Crontab string as a parameter."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"DateTime"),": Executes the action at a specific UNIX timestamp."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Oracle"),": Executes the action when an oracle transaction is replicated.")),(0,r.kt)("p",null,"Each of these triggers can be used to define targeted actions based on your specific requirements."),(0,r.kt)("h3",{id:"readonly-functions-definition"},"Readonly functions definition"),(0,r.kt)("p",null,"Along with actions, we can defined readonly functions used to view some state data or do some computation without mutate the state.\nYou can annotate your function with ",(0,r.kt)("inlineCode",{parentName:"p"},"@publicFunction")," to expose them as readonly."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript",metastring:"title=/assembly/index.ts",title:"/assembly/index.ts"},"@publicFunction() // Expose this function as a readonly method\nexport function getCounter(ctx: Context<State>): string {\n  return `Current counter is ${ctx.state.counter}`;\n}\n")),(0,r.kt)("h3",{id:"function-parameters"},"Function parameters"),(0,r.kt)("p",null,"It's possible to accept arguments for the action and readonly function. In that case you have to use another context: "),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"ContextWithParams<State, CustomParams>"),": This allow to get the ",(0,r.kt)("inlineCode",{parentName:"li"},"arguments")," field in the ",(0,r.kt)("inlineCode",{parentName:"li"},"Context")," class assigned"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"ContextWithTransaction<State>"),": : This allow to get the ",(0,r.kt)("inlineCode",{parentName:"li"},"transaction")," field in the ",(0,r.kt)("inlineCode",{parentName:"li"},"Context")," class assigned"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"ContextWithTransactionAndParams<State, CustomParams>"),": This allow to get the both ",(0,r.kt)("inlineCode",{parentName:"li"},"arguments")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"transaction")," in the ",(0,r.kt)("inlineCode",{parentName:"li"},"Context")," class assigned")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript",metastring:"title=/assembly/index.ts",title:"/assembly/index.ts"},"class State {\n  counter: u32 = 0;\n}\n\nclass HelloParams {\n  name!: string;\n}\n\n@action(TriggerType.Transaction)\nexport function hello(ctx: ContextWithParams<State, HelloParams>): ActionResult<State> {\n  const state = ctx.state\n  state.counter++\n\n  return new ActionResult<State>()\n    .setState(state)\n    .setTransaction(new TransactionBuilder().setContent(`Hello from ${ctx.arguments.name}`))\n}\n\n@publicFunction()\nexport function counterStatus(ctx: Context<State>): string {\n  return `Current counter is ${ctx.state.counter}`\n}\n\n@publicFunction()\nexport function helloWorld(ctx: ContextWithParams<State, HelloParams>): string {\n  return `Hello World from ${ctx.arguments.name}`\n}\n")),(0,r.kt)("h3",{id:"transaction-builder"},"Transaction builder"),(0,r.kt)("p",null,"The SDK offers a transaction builder to simplify creation of transaction to be returned as result of an action."),(0,r.kt)("p",null,"First import it:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},'import { TransactionBuilder } from "@archethicjs/ae-contract-as";\n')),(0,r.kt)("p",null,"Then use it to create complex transaction:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},'new TransactionBuilder()\n  .setType(TransactionType.Transfer)\n  .setContent("Any content")\n  .addUCOTransfer(new Address("0000...."), 100000000)\n  ...\n')),(0,r.kt)("h4",{id:"api"},"API"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("inlineCode",{parentName:"strong"},"setType(type: TransactionType)")),(0,r.kt)("br",{parentName:"p"}),"\n",(0,r.kt)("em",{parentName:"p"},"Description"),": Defines the type of transaction.",(0,r.kt)("br",{parentName:"p"}),"\n",(0,r.kt)("em",{parentName:"p"},"Parameters"),":  "),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"type")," (",(0,r.kt)("inlineCode",{parentName:"li"},"TransactionType"),"): The type of the transaction (e.g., ",(0,r.kt)("inlineCode",{parentName:"li"},"Transfer"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"Token"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"Data"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"Contract"),")."))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("inlineCode",{parentName:"strong"},"setContent(data: String)")),(0,r.kt)("br",{parentName:"p"}),"\n",(0,r.kt)("em",{parentName:"p"},"Description"),": Sets free-form content for the transaction.",(0,r.kt)("br",{parentName:"p"}),"\n",(0,r.kt)("em",{parentName:"p"},"Parameters"),":  "),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"data")," (",(0,r.kt)("inlineCode",{parentName:"li"},"String"),"): The content to be included in the transaction, as a string."))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("inlineCode",{parentName:"strong"},"addUCOTransfer(to: Address, amount: u64)")),(0,r.kt)("br",{parentName:"p"}),"\n",(0,r.kt)("em",{parentName:"p"},"Description"),": Adds a UCO (Utility Coin) transfer to the transaction.",(0,r.kt)("br",{parentName:"p"}),"\n",(0,r.kt)("em",{parentName:"p"},"Parameters"),":  "),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"to")," (",(0,r.kt)("inlineCode",{parentName:"li"},"Address"),"): The recipient's address.  "),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"amount")," (",(0,r.kt)("inlineCode",{parentName:"li"},"u64"),"): The amount of UCO to transfer. (BigInt format - 10^8: 100000000 = 1 UCO)"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("inlineCode",{parentName:"strong"},"addTokenTransfer(to: Address, amount: u64, tokenAddress: Address, tokenId?: u32)")),(0,r.kt)("br",{parentName:"p"}),"\n",(0,r.kt)("em",{parentName:"p"},"Description"),": Adds a token transfer to the transaction.",(0,r.kt)("br",{parentName:"p"}),"\n",(0,r.kt)("em",{parentName:"p"},"Parameters"),":  "),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"to")," (",(0,r.kt)("inlineCode",{parentName:"li"},"Address"),"): The recipient's address.  "),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"amount")," (",(0,r.kt)("inlineCode",{parentName:"li"},"u64"),"): The amount of tokens to transfer. (BigInt format - 10^8: 100000000 = 1 token)"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"tokenAddress")," (",(0,r.kt)("inlineCode",{parentName:"li"},"Address"),"): The address of the token contract.  "),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"tokenId")," (",(0,r.kt)("inlineCode",{parentName:"li"},"u32"),", optional): The token ID if the token is non-fungible. If omitted, it assumes a fungible token."))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("inlineCode",{parentName:"strong"},"addRecipient<T>(address: Address, actionName: string, arg: T)")),(0,r.kt)("br",{parentName:"p"}),"\n",(0,r.kt)("em",{parentName:"p"},"Description"),": Adds a recipient for a smart contract call within the transaction.",(0,r.kt)("br",{parentName:"p"}),"\n",(0,r.kt)("em",{parentName:"p"},"Parameters"),":  "),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"address")," (",(0,r.kt)("inlineCode",{parentName:"li"},"Address"),"): The recipient's address.  "),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"actionName")," (",(0,r.kt)("inlineCode",{parentName:"li"},"string"),"): The name of the action or function to be called.  "),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"arg")," (",(0,r.kt)("inlineCode",{parentName:"li"},"T"),"): The arguments to pass to the smart contract function."))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("inlineCode",{parentName:"strong"},"addOwnership(secret: Hex, authorizedKeys: Map<PublicKey, Hex>)")),(0,r.kt)("br",{parentName:"p"}),"\n",(0,r.kt)("em",{parentName:"p"},"Description"),": Sets the ownership for the transaction with specified keys.",(0,r.kt)("br",{parentName:"p"}),"\n",(0,r.kt)("em",{parentName:"p"},"Parameters"),":  "),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"secret")," (",(0,r.kt)("inlineCode",{parentName:"li"},"Hex"),"): The encrypted secret"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"authorizedKeys")," (",(0,r.kt)("inlineCode",{parentName:"li"},"Map<PublicKey, Hex>"),"): A map of public keys and their corresponding secrets encrypted for the public keys."))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("inlineCode",{parentName:"strong"},"setContract(contract: Contract)")),(0,r.kt)("br",{parentName:"p"}),"\n",(0,r.kt)("em",{parentName:"p"},"Description"),": Sets the contract for the transaction.",(0,r.kt)("br",{parentName:"p"}),"\n",(0,r.kt)("em",{parentName:"p"},"Parameters"),":  "),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"contract")," (",(0,r.kt)("inlineCode",{parentName:"li"},"Contract"),"): The contract to be used in the transaction.")))),(0,r.kt)("h3",{id:"library-host-functions"},"Library (Host functions)"),(0,r.kt)("p",null,"To communicate with the Blockchain or with the external world (off-chain), you can import special functions to fetch external data."),(0,r.kt)("h4",{id:"blockchain-fetching"},"Blockchain fetching"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},'import {\n  getBalance, // Get the balance of user\n  getTransaction, // Get a specific transaction\n  getGenesisAddress, // Get the genesis address of any address\n  getLastAddress, // Get the last address of a chain\n  getFirstTransactionAddress, // Get the first transaction of a chain\n  getLastTransaction, // Get the last transaction of a chain\n  getBurnAddress, // Get the burn address\n  getPreviousAddress, // Get the previous address of any public key\n  getGenesisPublicKey, // Get the genesis public key of any public key\n} from "@archethic/ae-contract-as/assembly";\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="Example to fetch balance"',title:'"Example',to:!0,fetch:!0,'balance"':!0},'const balance = getBalance(args.address)\n\nconst ucoBalance = balance.uco\nconst tokenBalance = 0\n\nfor (let i = 0; i < balance.token.length; i++) {\n  if (Address.compare(\n    balance.token[i].tokenAddress,\n    new Address("00001FF1733CAA91336976EE7CEF5AFF6BB26C7682213B8E6770AB82272F966DAC35")\n  )) {\n    tokenBalance += balance.token[i].amount\n  }\n}\n')),(0,r.kt)("admonition",{type:"caution"},(0,r.kt)("p",{parentName:"admonition"},"Each function will crash the problem if any error is raised by the blockchain")),(0,r.kt)("h4",{id:"crypto-operations"},"Crypto operations"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},'import {\n  hmacWithStorageNonce, // Provide hmac using blockchain storage nonce (shared secret)\n  signWithRecovery, // Generate secp256r1 signature with recovery (compatible EVM)\n} from "@archethic/ae-contract-as/assembly";\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="Exemple to generate signature"',title:'"Exemple',to:!0,generate:!0,'signature"':!0},'const sig: Signature = signWithRecovery(new Hex("dataToSign"))\n')),(0,r.kt)("admonition",{type:"caution"},(0,r.kt)("p",{parentName:"admonition"},"Each function will crash the problem if any error is raised by the blockchain")),(0,r.kt)("h4",{id:"contract-interaction"},"Contract interaction"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},'import {\n  callFunction, // To call a smart contract public function (readonly)\n} from "@archethic/ae-contract-as/assembly"; \n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="Example to fetch another smart contract function with expected args"',title:'"Example',to:!0,fetch:!0,another:!0,smart:!0,contract:!0,function:!0,with:!0,expected:!0,'args"':!0},'const address = new Address("00000000000000000000000000000000000000000000000000000000000000000000")\nconst result = callFunction<ContractArgs, u32>(address, "functionName", { arg: 0 }).unwrapWithDefault(1)\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="Example to fetch another smart contract function without expected args"',title:'"Example',to:!0,fetch:!0,another:!0,smart:!0,contract:!0,function:!0,without:!0,expected:!0,'args"':!0},'const address = new Address("00000000000000000000000000000000000000000000000000000000000000000000")\nconst result = callFunction<NoArgs, u32>(address, "functionName").unwrap()\n')),(0,r.kt)("admonition",{type:"caution"},(0,r.kt)("p",{parentName:"admonition"},"Each ",(0,r.kt)("inlineCode",{parentName:"p"},"callFunction")," return a ",(0,r.kt)("inlineCode",{parentName:"p"},"Result<T>")," structure helping you to catch errors or let it crash.")),(0,r.kt)("h4",{id:"http-requests"},"HTTP requests"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},'import { HttpRequest, request } from "@archethic/ae-contract-as/assembly";\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="Example to fetch off-chain data"',title:'"Example',to:!0,fetch:!0,"off-chain":!0,'data"':!0},'// Fetch data from an off-chain source\nconst response = request({ uri: "https://api.example.com/data" } as HttpRequest);\n\nassert(response.status === 200, `Failed to fetch data: ${response.status}`)\nconst body = response.body\n// Do something with the body\n\n')),(0,r.kt)("admonition",{type:"caution"},(0,r.kt)("p",{parentName:"admonition"},"Each function will crash the problem if any error is raised by the blockchain")),(0,r.kt)("h3",{id:"errors"},"Errors"),(0,r.kt)("p",null,"Sometimes we want to return meaningfull error messages for incorrect values, in that case the sdk supports two ways of doing that:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"using assertions (",(0,r.kt)("inlineCode",{parentName:"li"},"assert"),") for non-recoverable logic errors."),(0,r.kt)("li",{parentName:"ul"},"using exceptions  (",(0,r.kt)("inlineCode",{parentName:"li"},"throw"),") for recoverable or user-defined exceptions.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="Example with assert"',title:'"Example',with:!0,'assert"':!0},'@action(TriggerType.Transaction)\nexport function inc(context: Context<UserState, IncArgs>): TransactionResult<UserState> {\n  const state = context.state;\n  assert(state.counter >= 0, "Counter state must not be negative");\n\n  // ...\n}\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="Example with throw"',title:'"Example',with:!0,'throw"':!0},'@action(TriggerType.Transaction)\nexport function inc(context: Context<UserState, IncArgs>): TransactionResult<UserState> {\n  const state = context.state;\n  if (state.counter < 0) {\n    throw new Error("Counter state must not be negative")\n  }\n\n  // ...\n}\n')),(0,r.kt)("h3",{id:"binaries"},"Binaries"),(0,r.kt)("p",null,"To work with binary such addresses, public keys, signatures, etc., the sdk provides a set of class you can use for this purpose"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},'import { Address, Signature, PublicKey, Hex } from "@archethic/ae-contract-as/assembly";\n\n// Compare two addresses\nconst addr1 = new Address("0000...C1C8");\nconst addr2 = new Address("0000...BE4A7");\nconst areSame = Address.compare(addr1, addr2); // Returns false if different\n\n// Format address as a string\nconsole.log(addr1.toString()); // Output: "0000...C1C8"\n\n// Create a new signature\nconst signature = new Signature("F1B7...FF67");\nconsole.log(signature.toString()); // Output: "F1B7...FF67"\n')),(0,r.kt)("h3",{id:"best-pratices"},"Best pratices"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Modularize State Updates:")),(0,r.kt)("p",null,"Separate state update logic into helper functions for better readability."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"function updateCounter(state: State, increment: number): State {\n  state.counter += increment;\n  return state;\n}\n\n@action(TriggerType.Transaction)\nexport function inc(ctx: Context<State>): ActionResult<State> {\n  const updatedState = updateCounter(ctx.state, 1);\n  return new ActionResult<State>().setState(updatedState);\n}\n")),(0,r.kt)("p",null,"You could also create multiple files and modules if the main files become too big.\nThen you could import them in the actions definition"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript",metastring:"title=/assembly/counter.ts",title:"/assembly/counter.ts"},"export updateCounter(state: State, increment: number): State {\n  state.counter += increment;\n  return state;\n}\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript",metastring:"title=/assembly/index.ts",title:"/assembly/index.ts"},'import { updateCounter } from "./counter"\n\n@action(TriggerType.Transaction)\nexport function inc(ctx: Context<State>): ActionResult<State> {\n  const updatedState = updateCounter(ctx.state, 1);\n  return new ActionResult<State>().setState(updatedState);\n}\n')),(0,r.kt)("ol",{start:2},(0,r.kt)("li",{parentName:"ol"},"Input Validation")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Validate inputs early to prevent unexpected behavior or crashes."),(0,r.kt)("li",{parentName:"ul"},"Use assertions or throw exceptions for invalid inputs.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},'@action(TriggerType.Transaction)\nexport function setName(ctx: ContextWithParams<State, SetParams>): ActionResult<State> {\n  const name = ctx.arguments.name.trim();\n  assert(name.length > 0, "Name cannot be empty");\n\n  ctx.state.data.set("name", name);\n  return new ActionResult<State>().setState(ctx.state);\n}\n')),(0,r.kt)("ol",{start:3},(0,r.kt)("li",{parentName:"ol"},"Use Typed Classes for Inputs:")),(0,r.kt)("p",null,"Always define clear classes for function arguments to define a structured ABI"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"class HelloParams {\n  name!: string; // Use '!' to enforce this property as required\n}\n\n@action(TriggerType.Transaction)\nexport function setName(ctx: ContextWithParams<State, HelloParams>): ActionResult<State> {\n  return new ActionResult<State>().setTransaction(\n    new TransactionBuilder()\n      .setContent(ctx.arguments.name)\n  )\n}\n\n// Do not\n@action(TriggerType.Transaction)\nexport function setName(ctx: ContextWithParams<State, { name: string }>): ActionResult<State> {\n  ...\n}\n")),(0,r.kt)("ol",{start:4},(0,r.kt)("li",{parentName:"ol"},"Use Constants and Enums")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Replace magic numbers or strings with constants or enums for clarity and maintainability.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"const MAX_RETRY_ATTEMPTS: u8 = 5;\n\nenum TransactionType {\n  Transfer = 1,\n  ContractCall = 2,\n}\n")),(0,r.kt)("ol",{start:5},(0,r.kt)("li",{parentName:"ol"},"Secure Contract Interactions")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"When interacting with other contracts, validate responses and handle errors gracefully."),(0,r.kt)("li",{parentName:"ul"},"Avoid hardcoding addresses unless they are static or genesis addresses.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},'const result = callFunction<NoArgs, u32>(address, "getBalance").unwrapWithDefault(0);\nif (result === 0) {\n  throw new Error("Failed to fetch balance");\n}\n')),(0,r.kt)("ol",{start:6},(0,r.kt)("li",{parentName:"ol"},"Avoid floating-point arithmetic")),(0,r.kt)("p",null,"The most reliable solution is to avoid floating-point numbers altogether, as they can lead to subtle discrepancies.\nInstead, use fixed-point arithmetic, which represents numbers as integers scaled by a constant factor (e.g., a fixed number of decimal places)."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Representation: For example, represent currency values in the smallest possible value by using integers to avoid floating-point imprecision. UCO or tokens amount must be defined in 10^8 unit (",(0,r.kt)("inlineCode",{parentName:"li"},"100000000")," for ",(0,r.kt)("inlineCode",{parentName:"li"},"1")," UCO)"),(0,r.kt)("li",{parentName:"ul"},"Precision: Choose an appropriate scale factor that matches the precision you need for your application (e.g., 1000 for millisecond precision or 100 for cent precision in financial applications).")),(0,r.kt)("p",null,"Example: If you want to represent 10.25 with two decimal places, store it as 1025 (integer) and scale it by 100."),(0,r.kt)("p",null,"AssemblyScript provides i32, i64, u32, and u64 types for integer operations that can be used for these calculations."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"const scaleFactor = 1000;  // For 3 decimal places\nlet a: i64 = 10250;  // Represents 10.25 (scaled by 1000)\nlet b: i64 = 15000;  // Represents 15.00 (scaled by 1000)\nlet sum: i64 = a + b;  // Sum is 25750, representing 25.75 after dividing by scale factor\n")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"i64")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"u64")," provide operations that work with large numbers. By using integer types in calculations, you ensure the contract behaves deterministically across all environments."),(0,r.kt)("h2",{id:"tests"},"Tests"),(0,r.kt)("p",null,"To run the suite test you can execute the following command."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"npm run test\n")),(0,r.kt)("h2",{id:"cli"},"CLI"),(0,r.kt)("h3",{id:"build"},"Build"),(0,r.kt)("p",null,"To compile the project using the following command"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"npm run build \n")),(0,r.kt)("p",null,"By default the build command is targetting debug mode.\nThis enables debug information in emitted binaries, usefull in development to help identifying the source of errorness while interacting with the WASM module.\nFor example, the compiler appends a name section to the binary, containing names of functions, globals, locals and so on. These names will show up in stack traces."),(0,r.kt)("p",null,"This mode also generate *.wat file, to see the text representation of the wasm module in human readable format."),(0,r.kt)("h4",{id:"manifest-generation"},"Manifest generation"),(0,r.kt)("p",null,"After the build is successed, the manifest file will be generated with the corresponding ABI for the functions definitions, input/output and state types."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json",metastring:"title=/dist/manifest.json",title:"/dist/manifest.json"},'{\n  "abi": {\n    "state": {\n      "counter": "u32"\n    },\n    "functions": {\n      "hello": {\n        "type": "action",\n        "triggerType": "transaction",\n        "input": {\n          "name": "string"\n        },\n      },\n      "helloWorld": {\n        "type": "publicFunction",\n        "input": {\n          "name": "string"\n        },\n        "output": "string"\n      }\n    }\n  }\n}\n')),(0,r.kt)("h4",{id:"release-mode"},"Release mode"),(0,r.kt)("p",null,"To have a more production ready compilation, you can use the following command to compile for release"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"npx aewasm build --mode release\n")),(0,r.kt)("p",null,"This will compile the WASM module with the minimal runtime overhead (without garbage collection) and optimize the module compilation for the size. "),(0,r.kt)("h3",{id:"deploy"},"Deploy"),(0,r.kt)("p",null,"Finally to deploy it to a live environment (local, testnet, mainnet), use the following command"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"npx aewasm build --mode release && npx aewasm deploy -s <SEED> -e [ENDPOINT]\n")))}m.isMDXComponent=!0},8209:(e,t,n)=>{n(67294)}}]);