"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[5073],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>_});var a=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var o=a.createContext({}),d=function(e){var t=a.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},c=function(e){var t=d(e.components);return a.createElement(o.Provider,{value:t},e.children)},p="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},k=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,o=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),p=d(n),k=i,_=p["".concat(o,".").concat(k)]||p[k]||u[k]||r;return n?a.createElement(_,l(l({ref:t},c),{},{components:n})):a.createElement(_,l({ref:t},c))}));function _(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,l=new Array(r);l[0]=k;var s={};for(var o in t)hasOwnProperty.call(t,o)&&(s[o]=t[o]);s.originalType=e,s[p]="string"==typeof e?e:i,l[1]=s;for(var d=2;d<r;d++)l[d]=n[d];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}k.displayName="MDXCreateElement"},63078:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>l,default:()=>u,frontMatter:()=>r,metadata:()=>s,toc:()=>d});var a=n(87462),i=(n(67294),n(3905));n(8209);const r={id:"chain",title:"Chain module",sidebar_label:"Chain"},l=void 0,s={unversionedId:"build/smart-contracts/language/library/chain",id:"build/smart-contracts/language/library/chain",title:"Chain module",description:"The Chain module contains functions to fetch data from a Transaction Chain.",source:"@site/docs/build/smart-contracts/language/library/chain.md",sourceDirName:"build/smart-contracts/language/library",slug:"/build/smart-contracts/language/library/chain",permalink:"/build/smart-contracts/language/library/chain",draft:!1,tags:[],version:"current",lastUpdatedAt:1727128301,formattedLastUpdatedAt:"Sep 23, 2024",frontMatter:{id:"chain",title:"Chain module",sidebar_label:"Chain"},sidebar:"docs",previous:{title:"Library",permalink:"/build/smart-contracts/language/library/"},next:{title:"Code",permalink:"/build/smart-contracts/language/library/code"}},o={},d=[{value:"get_genesis_address/1 <code>[I/O]</code>",id:"get_genesis_address1-io",level:3},{value:"get_first_transaction_address/1 <code>[I/O]</code>",id:"get_first_transaction_address1-io",level:3},{value:"get_genesis_public_key/1 <code>[I/O]</code>",id:"get_genesis_public_key1-io",level:3},{value:"get_burn_address/0",id:"get_burn_address0",level:3},{value:"get_transaction/1  <code>[I/O]</code>",id:"get_transaction1--io",level:3},{value:"get_last_address/1 <code>[I/O]</code>",id:"get_last_address1-io",level:3},{value:"get_last_transaction/1 <code>[I/O]</code>",id:"get_last_transaction1-io",level:3},{value:"get_previous_address/1",id:"get_previous_address1",level:3},{value:"get_balance/1 <code>[I/O]</code>",id:"get_balance1-io",level:3},{value:"get_uco_balance/1 <code>[I/O]</code>",id:"get_uco_balance1-io",level:3},{value:"get_token_balance/2 <code>[I/O]</code>",id:"get_token_balance2-io",level:3},{value:"get_token_balance/3 <code>[I/O]</code>",id:"get_token_balance3-io",level:3},{value:"get_tokens_balance/1 <code>[I/O]</code>",id:"get_tokens_balance1-io",level:3},{value:"get_tokens_balance/2 <code>[I/O]</code>",id:"get_tokens_balance2-io",level:3}],c={toc:d},p="wrapper";function u(e){let{components:t,...n}=e;return(0,i.kt)(p,(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"Chain")," module contains functions to fetch data from a Transaction Chain."),(0,i.kt)("h3",{id:"get_genesis_address1-io"},"get_genesis_address/1 ",(0,i.kt)("inlineCode",{parentName:"h3"},"[I/O]")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-elixir"},'Chain.get_genesis_address("000012345...") # "000056789..."\nChain.get_genesis_address("000012345...") # "000012345..."\n')),(0,i.kt)("p",null,"Parameters:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"address")," the transaction address")),(0,i.kt)("p",null,"Returns the genesis address of the transaction chain that contains a transaction at ",(0,i.kt)("inlineCode",{parentName:"p"},"address"),". If there is no transaction at ",(0,i.kt)("inlineCode",{parentName:"p"},"address"),", it returns ",(0,i.kt)("inlineCode",{parentName:"p"},"address"),"."),(0,i.kt)("h3",{id:"get_first_transaction_address1-io"},"get_first_transaction_address/1 ",(0,i.kt)("inlineCode",{parentName:"h3"},"[I/O]")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-elixir"},'Chain.get_first_transaction_address("000012345...") # "000056789..."\n')),(0,i.kt)("p",null,"Parameters:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"address")," the transaction address")),(0,i.kt)("p",null,"Returns the address of the first transaction of the transaction chain that contains a transaction at ",(0,i.kt)("inlineCode",{parentName:"p"},"address"),"."),(0,i.kt)("admonition",{type:"danger"},(0,i.kt)("p",{parentName:"admonition"},"[IT CURRENTLY CRASH IF THERE IS NO TRANSACTION]")),(0,i.kt)("h3",{id:"get_genesis_public_key1-io"},"get_genesis_public_key/1 ",(0,i.kt)("inlineCode",{parentName:"h3"},"[I/O]")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-elixir"},'Chain.get_genesis_public_key("00013B08D...") # "000108A5C..."\n')),(0,i.kt)("p",null,"Parameters:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"public_key")," the public key")),(0,i.kt)("p",null,"Returns the genesis public key of ",(0,i.kt)("inlineCode",{parentName:"p"},"public_key"),"."),(0,i.kt)("h3",{id:"get_burn_address0"},"get_burn_address/0"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-elixir"},'Chain.get_burn_address() # "0000000000..."\n')),(0,i.kt)("p",null,"Returns the burn address."),(0,i.kt)("h3",{id:"get_transaction1--io"},"get_transaction/1  ",(0,i.kt)("inlineCode",{parentName:"h3"},"[I/O]")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-elixir"},'Chain.get_transaction(0x00ABCD..) # [address: "00ABCD..", content: "...", uco_transfers: [], ...]\n')),(0,i.kt)("p",null,"Parameters:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"address")," the transaction address")),(0,i.kt)("p",null,"Returns the transaction at ",(0,i.kt)("inlineCode",{parentName:"p"},"address"),". If there is no transaction at ",(0,i.kt)("inlineCode",{parentName:"p"},"address"),", it returns ",(0,i.kt)("inlineCode",{parentName:"p"},"nil"),". See ",(0,i.kt)("a",{parentName:"p",href:"/build/smart-contracts/language/actions#appendix-1-the-transaction-map"},"Appendix 1"),"."),(0,i.kt)("h3",{id:"get_last_address1-io"},"get_last_address/1 ",(0,i.kt)("inlineCode",{parentName:"h3"},"[I/O]")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-elixir"},'Chain.get_last_address(0x00ABCD..) # "00EFAB..."\n')),(0,i.kt)("p",null,"Parameters:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"address")," the transaction address")),(0,i.kt)("p",null,"Returns the latest transaction address of the chain that contains ",(0,i.kt)("inlineCode",{parentName:"p"},"address"),"."),(0,i.kt)("h3",{id:"get_last_transaction1-io"},"get_last_transaction/1 ",(0,i.kt)("inlineCode",{parentName:"h3"},"[I/O]")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-elixir"},'Chain.get_last_transaction(0x00ABCD..) # [address: "00EFAB..", content: "...", uco_transfers: [], ...]\nChain.get_last_transaction(0x00ABCF..) # nil\n')),(0,i.kt)("p",null,"Parameters:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"address")," the transaction address")),(0,i.kt)("p",null,"Returns the latest transaction of the chain that contains the transaction at ",(0,i.kt)("inlineCode",{parentName:"p"},"address"),". May return nil if ",(0,i.kt)("inlineCode",{parentName:"p"},"address")," does not exist. See ",(0,i.kt)("a",{parentName:"p",href:"/build/smart-contracts/language/actions#appendix-1-the-transaction-map"},"Appendix 1"),"."),(0,i.kt)("h3",{id:"get_previous_address1"},"get_previous_address/1"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-elixir"},'Chain.get_previous_address(0x00ABCD..) # "00EFAB.."\nChain.get_previous_address(transaction) # "0014AC.."\n')),(0,i.kt)("p",null,"Parameters:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"previous_public_key")," or ",(0,i.kt)("inlineCode",{parentName:"li"},"transaction")," either a transaction map or a the previous_public_key")),(0,i.kt)("p",null,"Returns previous transaction's address. Usually called with a ",(0,i.kt)("inlineCode",{parentName:"p"},"transaction"),", it is also possible to call it with the ",(0,i.kt)("inlineCode",{parentName:"p"},"previous_public_key")," directly."),(0,i.kt)("h3",{id:"get_balance1-io"},"get_balance/1 ",(0,i.kt)("inlineCode",{parentName:"h3"},"[I/O]")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-elixir"},"balance = Chain.get_balance(0x00ABCD..)\nuco_balance = balance.uco # 181812.87\ntestcoin_balance = Map.get(balance.tokens, [token_address: 0x00ABCD.., token_id: 0]) # 4756.5401\n")),(0,i.kt)("p",null,"Parameters:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"address")," the address of a transaction in the chain you're interested in")),(0,i.kt)("p",null,"Returns the balance of the chain that contains the transaction at ",(0,i.kt)("inlineCode",{parentName:"p"},"address"),"."),(0,i.kt)("p",null,"The return value is a map with two keys ",(0,i.kt)("inlineCode",{parentName:"p"},"uco")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"tokens"),". The value behind ",(0,i.kt)("inlineCode",{parentName:"p"},"tokens")," is a map where the keys are tokens' identifiers (",(0,i.kt)("inlineCode",{parentName:"p"},"[token_address: HEX, token_id: POS_INT]"),") and the values are floats."),(0,i.kt)("p",null,"Useful if you need to retrieve the entire list of tokens (and uco) at the same time."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"If you're only interested at UCO, consider ",(0,i.kt)("a",{parentName:"li",href:"#get_uco_balance1-io"},"get_uco_balance/1"),"."),(0,i.kt)("li",{parentName:"ul"},"If you're only interested in a specific token, consider ",(0,i.kt)("a",{parentName:"li",href:"#get_token_balance2-io"},"get_token_balance/2"),"."),(0,i.kt)("li",{parentName:"ul"},"If you're only interested in a few specific tokens, consider ",(0,i.kt)("a",{parentName:"li",href:"#get_tokens_balance2-io"},"get_tokens_balance/2"),".")),(0,i.kt)("h3",{id:"get_uco_balance1-io"},"get_uco_balance/1 ",(0,i.kt)("inlineCode",{parentName:"h3"},"[I/O]")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-elixir"},"Chain.get_uco_balance(0x00ABCD..) # 14.26239\n")),(0,i.kt)("p",null,"Parameters:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"address")," the address of a transaction in the chain you're interested in")),(0,i.kt)("p",null,"Returns the amount of UCO in the chain that contains the transaction at ",(0,i.kt)("inlineCode",{parentName:"p"},"address"),"."),(0,i.kt)("h3",{id:"get_token_balance2-io"},"get_token_balance/2 ",(0,i.kt)("inlineCode",{parentName:"h3"},"[I/O]")),(0,i.kt)("p",null,"Same as ",(0,i.kt)("a",{parentName:"p",href:"#get_token_balance3-io"},"get_token_balance/3")," called with ",(0,i.kt)("inlineCode",{parentName:"p"},"token_id: 0"),"."),(0,i.kt)("h3",{id:"get_token_balance3-io"},"get_token_balance/3 ",(0,i.kt)("inlineCode",{parentName:"h3"},"[I/O]")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-elixir"},"transaction_address = 0x00ABCD..\nfungible_token_address = 0x00BCDE..\nnon_fungible_token_address = 0x00FEDC..\nChain.get_token_balance(transaction_address, fungible_token_address, 0) # 14.26239591\nChain.get_token_balance(transaction_address, non_fungible_token_address, 1) # 1\nChain.get_token_balance(transaction_address, non_fungible_token_address, 2) # 0\n")),(0,i.kt)("p",null,"Parameters:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"address")," the address of a transaction in the chain you're interested in"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"token_address")," the address of the transaction that defined the token"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"token_id")," the index of the element in the collection (0 for fungible tokens)")),(0,i.kt)("p",null,"Returns the token balance of the token defined at ",(0,i.kt)("inlineCode",{parentName:"p"},"token_address")," in the chain that contains the transaction at ",(0,i.kt)("inlineCode",{parentName:"p"},"address"),".\nNon-fungible tokens must precise the ",(0,i.kt)("inlineCode",{parentName:"p"},"token_id")," (index of the token in the collection)."),(0,i.kt)("h3",{id:"get_tokens_balance1-io"},"get_tokens_balance/1 ",(0,i.kt)("inlineCode",{parentName:"h3"},"[I/O]")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-elixir"},"balance = Chain.get_tokens_balance(0x00ABCD..)\nabdecoin_balance = Map.get(balance, [token_address: 0x00ABDE.., token_id: 0]) # 8.90800012\ndefacoin_balance = Map.get(balance, [token_address: 0x00DEFA.., token_id: 0]) # 4.05902597\n")),(0,i.kt)("p",null,"Parameters:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"address")," the address of a transaction in the chain you're interested in")),(0,i.kt)("p",null,"Returns a subset of the token balance of the chain that contains the transaction at ",(0,i.kt)("inlineCode",{parentName:"p"},"address"),".\nThe return value is a map where the keys are the tokens' identifiers: ",(0,i.kt)("inlineCode",{parentName:"p"},"[token_address: HEX, token_id: POS_INT]")," and the value are floats."),(0,i.kt)("p",null,"Useful if you need to retrieve many tokens at the same time."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"If you're only interested in a specific token, consider  ",(0,i.kt)("a",{parentName:"li",href:"#get_token_balance2-io"},"get_token_balance/2"),".")),(0,i.kt)("h3",{id:"get_tokens_balance2-io"},"get_tokens_balance/2 ",(0,i.kt)("inlineCode",{parentName:"h3"},"[I/O]")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-elixir"},"balance = Chain.get_tokens_balance(0x00ABCD.., [\n  [token_address: 0x00DEFA.., token_id: 1],\n  [token_address: 0x00DEFA.., token_id: 2]\n])\nnft1 = Map.get(balance, [token_address: 0x00DEFA.., token_id: 1]) # 1\nnft2 = Map.get(balance, [token_address: 0x00DEFA.., token_id: 2]) # 0\n")),(0,i.kt)("p",null,"Parameters:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"address")," the address of a transaction in the chain you're interested in"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"tokens_identifiers")," the list of tokens' identifiers (",(0,i.kt)("inlineCode",{parentName:"li"},"[token_address: HEX, token_id: POS_INT]"),") to return")),(0,i.kt)("p",null,"Returns a subset of the token balance of the chain that contains the transaction at ",(0,i.kt)("inlineCode",{parentName:"p"},"address"),".\nThe return value is a map where the keys are the tokens' identifiers: ",(0,i.kt)("inlineCode",{parentName:"p"},"[token_address: HEX, token_id: POS_INT]")," and the value are floats."),(0,i.kt)("p",null,"Useful if you need to retrieve many tokens at the same time."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"If you're only interested in a specific token, consider ",(0,i.kt)("a",{parentName:"li",href:"#get_token_balance2-io"},"get_token_balance/2"),".")))}u.isMDXComponent=!0},8209:(e,t,n)=>{n(67294)}}]);