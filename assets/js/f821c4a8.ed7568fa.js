"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[4860],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>k});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var c=a.createContext({}),s=function(e){var t=a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},d=function(e){var t=s(e.components);return a.createElement(c.Provider,{value:t},e.children)},p="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,c=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),p=s(n),m=r,k=p["".concat(c,".").concat(m)]||p[m]||u[m]||o;return n?a.createElement(k,i(i({ref:t},d),{},{components:n})):a.createElement(k,i({ref:t},d))}));function k(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=m;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l[p]="string"==typeof e?e:r,i[1]=l;for(var s=2;s<o;s++)i[s]=n[s];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},58447:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>l,toc:()=>s});var a=n(87462),r=(n(67294),n(3905));n(8209);const o={id:"contract",title:"Contract module",sidebar_label:"Contract"},i=void 0,l={unversionedId:"build/smart-contracts/language/library/contract",id:"build/smart-contracts/language/library/contract",title:"Contract module",description:"The Contract module contains functions that deals with current and other contracts.",source:"@site/docs/build/smart-contracts/language/library/contract.md",sourceDirName:"build/smart-contracts/language/library",slug:"/build/smart-contracts/language/library/contract",permalink:"/build/smart-contracts/language/library/contract",draft:!1,tags:[],version:"current",lastUpdatedAt:1716905408,formattedLastUpdatedAt:"May 28, 2024",frontMatter:{id:"contract",title:"Contract module",sidebar_label:"Contract"},sidebar:"docs",previous:{title:"Code",permalink:"/build/smart-contracts/language/library/code"},next:{title:"Crypto",permalink:"/build/smart-contracts/language/library/crypto"}},c={},s=[{value:"call_function/3 <code>[I/O]</code>",id:"call_function3-io",level:3},{value:"set_type/1 <code>[Transaction]</code>",id:"set_type1-transaction",level:3},{value:"set_content/1 <code>[Transaction]</code>",id:"set_content1-transaction",level:3},{value:"set_code/1 <code>[Transaction]</code>",id:"set_code1-transaction",level:3},{value:"add_uco_transfer/1 <code>[Transaction]</code>",id:"add_uco_transfer1-transaction",level:3},{value:"add_uco_transfers/1 <code>[Transaction]</code>",id:"add_uco_transfers1-transaction",level:3},{value:"add_token_transfer/1 <code>[Transaction]</code>",id:"add_token_transfer1-transaction",level:3},{value:"add_token_transfers/1 <code>[Transaction]</code>",id:"add_token_transfers1-transaction",level:3},{value:"add_ownership/1 <code>[Transaction]</code>",id:"add_ownership1-transaction",level:3},{value:"add_ownerships/1 <code>[Transaction]</code>",id:"add_ownerships1-transaction",level:3},{value:"add_recipient/1 <code>[Transaction]</code>",id:"add_recipient1-transaction",level:3},{value:"add_recipients/1 <code>[Transaction]</code>",id:"add_recipients1-transaction",level:3}],d={toc:s},p="wrapper";function u(e){let{components:t,...n}=e;return(0,r.kt)(p,(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"Contract")," module contains functions that deals with current and other contracts."),(0,r.kt)("h3",{id:"call_function3-io"},"call_function/3 ",(0,r.kt)("inlineCode",{parentName:"h3"},"[I/O]")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-elixir"},'Contract.call_function(0x0000ABCD..., "add", [1, 2])\n')),(0,r.kt)("p",null,"Parameters:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"contract_address")," the contract's adddress"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"function_name")," the function name"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"args")," the list of arguments to call the function with")),(0,r.kt)("p",null,"Calls the exported function ",(0,r.kt)("inlineCode",{parentName:"p"},"function_name")," of the Smart Contract at ",(0,r.kt)("inlineCode",{parentName:"p"},"contract_address")," with given ",(0,r.kt)("inlineCode",{parentName:"p"},"args")," and return the result value."),(0,r.kt)("h3",{id:"set_type1-transaction"},"set_type/1 ",(0,r.kt)("inlineCode",{parentName:"h3"},"[Transaction]")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-elixir"},'Contract.set_type("transfer")\n')),(0,r.kt)("p",null,"Parameters:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"type"),' the transaction type ("contract", "transfer", "data", "hosting")')),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Mutates")," the next transaction to be of type ",(0,r.kt)("inlineCode",{parentName:"p"},"type"),"."),(0,r.kt)("h3",{id:"set_content1-transaction"},"set_content/1 ",(0,r.kt)("inlineCode",{parentName:"h3"},"[Transaction]")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-elixir"},'Contract.set_content("Hello Smart Contract")\n')),(0,r.kt)("p",null,"Parameters:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"content")," the transaction's content (we usually use this as the state of the smart contract)")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Mutates")," the next transaction content to be ",(0,r.kt)("inlineCode",{parentName:"p"},"content"),"."),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"While ",(0,r.kt)("inlineCode",{parentName:"p"},"content")," is always a string when you read it, it is possible here to send an integer or a float for convenience.\nFor any other data structure, you should serialize it with the ",(0,r.kt)("a",{parentName:"p",href:"/build/smart-contracts/language/library#json"},"Json module")," for example.")),(0,r.kt)("h3",{id:"set_code1-transaction"},"set_code/1 ",(0,r.kt)("inlineCode",{parentName:"h3"},"[Transaction]")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-elixir"},'Contract.set_code("@version 1\\ncondition inherit: []")\n')),(0,r.kt)("p",null,"Parameters:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"code")," the code")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Mutates")," the next transaction code to be ",(0,r.kt)("inlineCode",{parentName:"p"},"code"),"."),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},'This example "closes" the contract, by adding an ',(0,r.kt)("inlineCode",{parentName:"p"},"condition inherit")," that doesn't accept anything. It will be impossible to create a new transaction in this chain.")),(0,r.kt)("h3",{id:"add_uco_transfer1-transaction"},"add_uco_transfer/1 ",(0,r.kt)("inlineCode",{parentName:"h3"},"[Transaction]")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-elixir"},'Contract.add_uco_transfer(to: "000012345...", amount: 1)\n')),(0,r.kt)("p",null,"Parameters:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"uco_transfer")," a map with two keys:",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"to"),": the destination address"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"amount"),": the number of UCO")))),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Mutates")," the next transaction to add the ",(0,r.kt)("inlineCode",{parentName:"p"},"uco_transfer"),"."),(0,r.kt)("h3",{id:"add_uco_transfers1-transaction"},"add_uco_transfers/1 ",(0,r.kt)("inlineCode",{parentName:"h3"},"[Transaction]")),(0,r.kt)("p",null,"Equivalent to call ",(0,r.kt)("a",{parentName:"p",href:"#add_uco_transfer1-transaction"},"add_uco_transfer/1")," for each element of the list"),(0,r.kt)("h3",{id:"add_token_transfer1-transaction"},"add_token_transfer/1 ",(0,r.kt)("inlineCode",{parentName:"h3"},"[Transaction]")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-elixir"},'Contract.add_token_transfer(\n    to: "000012345...",\n    amount: 1.2,\n    token_address: "000023456...")\nContract.add_token_transfer(\n    to: "000012345...",\n    amount: 1.2,\n    token_id: 4,\n    token_address: "000023456...")\n')),(0,r.kt)("p",null,"Parameters:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"token_transfer")," a map with three or four keys:",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"to"),": the destination address"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"amount"),": the number of UCO"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"token_address"),": the transaction address of the token"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"[token_id]"),": an optional integer to specify which index in the list (used for the NFTs)")))),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Mutates")," the next transaction to add the ",(0,r.kt)("inlineCode",{parentName:"p"},"token_transfer"),"."),(0,r.kt)("h3",{id:"add_token_transfers1-transaction"},"add_token_transfers/1 ",(0,r.kt)("inlineCode",{parentName:"h3"},"[Transaction]")),(0,r.kt)("p",null,"Equivalent to call ",(0,r.kt)("a",{parentName:"p",href:"#add_token_transfer1-transaction"},"add_token_transfer/1")," for each element of the list"),(0,r.kt)("h3",{id:"add_ownership1-transaction"},"add_ownership/1 ",(0,r.kt)("inlineCode",{parentName:"h3"},"[Transaction]")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-elixir"},'authorized_keys = Map.new()\nauthorized_keys = Map.set(authorized_keys, public_key, encoded_secret_key)\nContract.add_ownership(\n    secret: "ENCODED_SECRET1",\n    authorized_keys: authorized_keys\n)\n')),(0,r.kt)("p",null,"Parameters:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"ownership")," a map with two keys:",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"secret"),": the encoded secret"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"authorized_keys"),": a map where the keys are the ",(0,r.kt)("inlineCode",{parentName:"li"},"public_keys")," and the values are the ",(0,r.kt)("inlineCode",{parentName:"li"},"encoded_secret_keys")," (the keys to decode the secret encoded by each ",(0,r.kt)("inlineCode",{parentName:"li"},"public_key"),")")))),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"It is the developer's job to encode the secret & the secret key for each authorized key.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Mutates")," the next transaction to add the ",(0,r.kt)("inlineCode",{parentName:"p"},"ownership"),"."),(0,r.kt)("h3",{id:"add_ownerships1-transaction"},"add_ownerships/1 ",(0,r.kt)("inlineCode",{parentName:"h3"},"[Transaction]")),(0,r.kt)("p",null,"Equivalent to call ",(0,r.kt)("a",{parentName:"p",href:"#add_ownership1-transaction"},"add_ownership/1")," for each element of the list"),(0,r.kt)("h3",{id:"add_recipient1-transaction"},"add_recipient/1 ",(0,r.kt)("inlineCode",{parentName:"h3"},"[Transaction]")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-elixir"},'Contract.add_recipient("000012345...")\n')),(0,r.kt)("p",null,"Parameters:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"address"),": a transaction address (one with a smart contract)")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Mutates")," the next transaction to add the ",(0,r.kt)("inlineCode",{parentName:"p"},"address")," in the recipients."),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"Recipients are used to trigger smart contracts")),(0,r.kt)("h3",{id:"add_recipients1-transaction"},"add_recipients/1 ",(0,r.kt)("inlineCode",{parentName:"h3"},"[Transaction]")),(0,r.kt)("p",null,"Equivalent to call ",(0,r.kt)("a",{parentName:"p",href:"#add_recipient1-transaction"},"add_recipients/1")," for each element of the list"))}u.isMDXComponent=!0},8209:(e,t,n)=>{n(67294)}}]);