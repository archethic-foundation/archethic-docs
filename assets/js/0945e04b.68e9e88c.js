"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[7611],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>m});var a=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var p=a.createContext({}),s=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},d=function(e){var t=s(e.components);return a.createElement(p.Provider,{value:t},e.children)},u="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},h=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,p=e.parentName,d=o(e,["components","mdxType","originalType","parentName"]),u=s(n),h=i,m=u["".concat(p,".").concat(h)]||u[h]||c[h]||r;return n?a.createElement(m,l(l({ref:t},d),{},{components:n})):a.createElement(m,l({ref:t},d))}));function m(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,l=new Array(r);l[0]=h;var o={};for(var p in t)hasOwnProperty.call(t,p)&&(o[p]=t[p]);o.originalType=e,o[u]="string"==typeof e?e:i,l[1]=o;for(var s=2;s<r;s++)l[s]=n[s];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}h.displayName="MDXCreateElement"},65484:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>l,default:()=>c,frontMatter:()=>r,metadata:()=>o,toc:()=>s});var a=n(87462),i=(n(67294),n(3905));n(8209);const r={id:"api",title:"Ledger Application API"},l=void 0,o={unversionedId:"build/clients/ledger-wallet/api",id:"build/clients/ledger-wallet/api",title:"Ledger Application API",description:"Reference Repository:",source:"@site/docs/build/clients/ledger-wallet/api.md",sourceDirName:"build/clients/ledger-wallet",slug:"/build/clients/ledger-wallet/api",permalink:"/build/clients/ledger-wallet/api",draft:!1,tags:[],version:"current",lastUpdatedAt:1719823380,formattedLastUpdatedAt:"Jul 1, 2024",frontMatter:{id:"api",title:"Ledger Application API"},sidebar:"docs",previous:{title:"Ledger wallet",permalink:"/build/clients/ledger-wallet/"},next:{title:"ADPU commands",permalink:"/build/clients/ledger-wallet/commands"}},p={},s=[{value:"GET VERSION",id:"get-version",level:2},{value:"GET DEVICE ORIGIN PUBLIC KEY",id:"get-device-origin-public-key",level:2},{value:"GET ARCHETHIC ADDRESS",id:"get-archethic-address",level:2},{value:"SIGN TRANSACTION",id:"sign-transaction",level:2}],d={toc:s},u="wrapper";function c(e){let{components:t,...n}=e;return(0,i.kt)(u,(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("admonition",{type:"success"},(0,i.kt)("p",{parentName:"admonition"},"Reference Repository:\n",(0,i.kt)("a",{parentName:"p",href:"https://github.com/archethic-foundation/archethic-ledger/tree/master/src"},"Archethic BOLOS App"))),(0,i.kt)("p",null,"[TOC]"),(0,i.kt)("h2",{id:"get-version"},"GET VERSION"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://github.com/archethic-foundation/archethic-ledger/blob/master/src/getVersion.c"},"Source File: getVersion.c")),(0,i.kt)("admonition",{type:"info"},(0,i.kt)("p",{parentName:"admonition"},"Get version returns the version of Device Application on Ledger")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Function Signature\n",(0,i.kt)("strong",{parentName:"p"},"handleGetVersion(uint8_t p1, uint8_t p2, uint8_t ","*","dataBuffer, uint16_t dataLength, volatile unsigned int ","*","flags)")),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"p1")," -> APDU Parameter (Not Concerned in our context)")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"p2")," ->  APDU Parameter (Not Concerned in our context)")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"*","dataBuffer")," -> NULL (Not required for getting version)")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"dataLength")," -> Length of the dataBuffer")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"*","flags")," -> ",(0,i.kt)("strong",{parentName:"p"},"Modes (respond immediately(sync), process and respond(async))")),(0,i.kt)("p",{parentName:"li"},"There is a general buffer ",(0,i.kt)("strong",{parentName:"p"},"G_io_apdu_buffer")," (already in ledger SDK) for both input and output, we copy version to this buffer from ",(0,i.kt)("strong",{parentName:"p"},"APPVERSION")," which is defined in Makefile. As we only need integer, so we subtract '0' from the APPVERSION","[0 | 2 | 4]",".\nAPPVERSION and APPNAME are defined in the makefile of the project."),(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"io_exchange_with_code(SW_OK, 3)")),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},"- It adds status at the end of the Buffer (G_io_apdu_buffer).\n- **SW_OK** (0x9000) adds status code at the end of the buffer.\n- 3 is the length of the data in the buffer. \n")))))),(0,i.kt)("h2",{id:"get-device-origin-public-key"},"GET DEVICE ORIGIN PUBLIC KEY"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://github.com/archethic-foundation/archethic-ledger/blob/master/src/getPublicKey.c"},"Source File: getPublicKey.c")),(0,i.kt)("admonition",{type:"info"},(0,i.kt)("p",{parentName:"admonition"},"Gets the hardware(device origin) public key from ledger device.")),(0,i.kt)("p",null,"It returns the public key derived from the hardware ledger device seed (",(0,i.kt)("strong",{parentName:"p"},"HARDWARE SEED"),")."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Function Signature\n",(0,i.kt)("strong",{parentName:"li"},"handleGetPublicKey(uint8_t p1, uint8_t p2, uint8_t ","*","dataBuffer, uint16_t dataLength, volatile unsigned int ","*","flags)"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"*","flags |= IO_ASYNCH_REPLY;"),"\nThis is added to get response from the user of HID. So needed to be set to the ASYNC."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"getOriginPublicKey(cx_ecfp_public_key_t ","*","publicKey)"),"\nThis calls ",(0,i.kt)("strong",null,"deriveArchethicKeyPair")," and return it.\n",(0,i.kt)("inlineCode",{parentName:"li"},"deriveArchethicKeyPair(CX_CURVE_SECP256K1, 650, 0xffff, 0, NULL, 0, NULL, publicKey);"))))),(0,i.kt)("admonition",{type:"note"},(0,i.kt)("pre",{parentName:"admonition"},(0,i.kt)("code",{parentName:"pre"},"- First Param** is the curve type which is fixed in our case.\n- Second Param** is the coin type which is defined for the [UCO Token]()\n- 3rd Param** is for the account which account to get,  which is defined as: \n       - $account =$ Depends on the intended use of the key.\n       - Currently fixed values: 0xFFFF for $o_{key}$, 0x0000 for a simple $w_{key}$\n- 4th Param** is address index \n- 5th Param** is masterSeed which is set to NULL because we need the device origin master seed.\n- 6th Param** is the master seed Length\n- 7th param** is the structure to store public key\n"))),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Function Signature\n",(0,i.kt)("strong",{parentName:"p"},"deriveArchethicKeyPair(cx_curve_t curve, uint32_t coin_type, uint32_t account, uint32_t address_index, uint8_t ","*","masterSeed, uint8_t masterSeedLen, cx_ecfp_private_key_t ","*","privateKey, cx_ecfp_public_key_t ","*","publicKey)")),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"This function first checks the curve type of the ",(0,i.kt)("inlineCode",{parentName:"p"},"cx_curve_t"),", which sets the mode for the which it needs to perform operation.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Next depending upon the account type as defined in the specification (0xffff | 0x0000) it derives the private key from the masterseed."),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"When the account type is ",(0,i.kt)("inlineCode",{parentName:"li"},"0xffff")," then ",(0,i.kt)("strong",{parentName:"li"},"os_perso_derive_node_with_seed()")," function is called which derives the key from the ledger hardware origin key."),(0,i.kt)("li",{parentName:"ul"},"When account type is ",(0,i.kt)("inlineCode",{parentName:"li"},"0x0000")," then it derives the rawPrivateKey from the from ",(0,i.kt)("strong",{parentName:"li"},"archethic_derive_with_seed_key()")," function which derives the key as per provided params."))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Next it checks if there is a ",(0,i.kt)("strong",{parentName:"p"},"publicKey")),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"If that is the case then it derives the corresponding public key and generates from the walletPrivateKey"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"If there is ",(0,i.kt)("strong",{parentName:"p"},"privateKey")," the it simple returns the ",(0,i.kt)("strong",{parentName:"p"},"privateKey"),".\n"))))),(0,i.kt)("admonition",{type:"success"},(0,i.kt)("p",{parentName:"admonition"},"As Public Key is in format: ",(0,i.kt)("strong",{parentName:"p"},"[curve_type, device_origin, 04xy]")),(0,i.kt)("p",{parentName:"admonition"},"02 -> Curve Type 04 -> Device Origin 04 -> uncompressed "),(0,i.kt)("p",{parentName:"admonition"},"X -> 52e77c79bea0f84e2d9c40356932fb0dd31688c23d6b6e9ac99d2869dc407692"),(0,i.kt)("p",{parentName:"admonition"},"Y -> 1e731fb84d0a094c6273fffed68147c381a273c83868cdeb9b81c7ec790c6d38")),(0,i.kt)("admonition",{type:"info"},(0,i.kt)("p",{parentName:"admonition"},"Since raw private key is in ",(0,i.kt)("strong",{parentName:"p"},"bytes")," it needs to be converted which is done by the function cx_ecfp_init_private_key(curve, rawPrivateKey, 32, &walletPrivateKey).")),(0,i.kt)("h2",{id:"get-archethic-address"},"GET ARCHETHIC ADDRESS"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://github.com/archethic-foundation/archethic-ledger/blob/master/src/getAddress.c"},"Source File: getAddress.c")),(0,i.kt)("admonition",{type:"info"},(0,i.kt)("p",{parentName:"admonition"},"Return the Archethic address from the ledger including curve type in the start")),(0,i.kt)("p",null,"INS = 04\nLc = Data Length\naddress_index = 4 bytes (bip44)\newk",(0,i.kt)("sub",null,"aes")," = encrypted wallet key"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Function Signature\n",(0,i.kt)("strong",{parentName:"li"},"handleGetAddress(uint8_t p1, uint8_t p2, uint8_t ","*","dataBuffer, uint16_t dataLength, volatile unsigned int ","*","flags)"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"First 4 bytes are address index hence we store then in ",(0,i.kt)("inlineCode",{parentName:"li"},"address_index")," from the data buffer (Converting them according to thier byte ordering.)"),(0,i.kt)("li",{parentName:"ul"},"We performECDH to get the secret pointX on the curve,",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Fn Signature ",(0,i.kt)("strong",{parentName:"li"},"performECDH(uint8_t ","*","ephPublicKey, uint8_t ephPublicKeySize, uint8_t ","*","ecdhPointX)")),(0,i.kt)("li",{parentName:"ul"},"This derives an Archethic keypair first with function ",(0,i.kt)("inlineCode",{parentName:"li"},"deriveArchethicKeyPair")," and gets originPrivateKey"),(0,i.kt)("li",{parentName:"ul"},"The performs ecdh with function ",(0,i.kt)("inlineCode",{parentName:"li"},"cx_ecdh")," with the originPrivateKey and takes publickey and finds the ecdhPointX "),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"cx_ecdh(&originPrivateKey, CX_ECDH_X, ephPublicKey, ephPublicKeySize, ecdhPointX, 32);")),(0,i.kt)("li",{parentName:"ul"},"publicKey is taken from the ",(0,i.kt)("inlineCode",{parentName:"li"},"dataBuffer")))),(0,i.kt)("li",{parentName:"ul"},"Now we decrypt the wallet with the ecdhPointX ",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Fn Signature ",(0,i.kt)("strong",{parentName:"li"},"decryptWallet(ecdhPointX, sizeof(ecdhPointX), dataBuffer, dataLength, g_wallet.encodedWallet, &g_wallet.walletLen);")),(0,i.kt)("li",{parentName:"ul"},"Since we have moved pointer we now only have ",(0,i.kt)("inlineCode",{parentName:"li"},"auth_tag")," 16 bytes and enc($wk_{aes}$) 32bytes",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Inside Decrypt wallet we first calculate the ",(0,i.kt)("inlineCode",{parentName:"li"},"aes_key_iv_tag")," from the ecdhPointX by double hashing it from the sha512 function $sha512(sha512(ecdh","_","secret\\ or\\ PointX))$. "),(0,i.kt)("li",{parentName:"ul"},"we get 3 parts from above double hashing in 64 bytes which are",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"aes_key")," ","[32bytes]"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"iv")," ","[16bytes]"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"auth_seed")," ","[16bytes]"))),(0,i.kt)("li",{parentName:"ul"},"Now we get sha256 has of auth_seed in ",(0,i.kt)("inlineCode",{parentName:"li"},"auth_key")),(0,i.kt)("li",{parentName:"ul"},"And now we do hmac(auth",(0,i.kt)("em",{parentName:"li"},"key , enc($wk"),"{aes}$)) and get ",(0,i.kt)("inlineCode",{parentName:"li"},"auth_tag")," which are first 16 bytes from hmac result. $Rest\\ 16\\ bytes\\ are\\ reserved$"),(0,i.kt)("li",{parentName:"ul"},"Now we compare if auth_tag equals to auth_tag supplied in the ",(0,i.kt)("inlineCode",{parentName:"li"},"dataBuffer")," ",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"If if doesn't return ",(0,i.kt)("inlineCode",{parentName:"li"},"0xBADDECODE")),(0,i.kt)("li",{parentName:"ul"},"If it does",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Decrypt the wallet and return the ",(0,i.kt)("strong",{parentName:"li"},"encoded wallet")))))))),(0,i.kt)("li",{parentName:"ul"},"Now get the BIP44Paths from the encoded wallet according to specificaton",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Fn Signature ",(0,i.kt)("strong",{parentName:"li"},"getBIP44Path(address_index, g_wallet.encodedWallet, g_wallet.walletLen, 0, g_bip44_path, &bip44pathlen);")),(0,i.kt)("li",{parentName:"ul"},"This does according to address index which were first 4 bytes of ",(0,i.kt)("inlineCode",{parentName:"li"},"dataBuffer")),(0,i.kt)("li",{parentName:"ul"},"This returns the bip44Path in ",(0,i.kt)("inlineCode",{parentName:"li"},"char* string_bip_44")))),(0,i.kt)("li",{parentName:"ul"},"Now Generate Archethic Address from the Encoded Wallet and set as required. ",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Fn Signature ",(0,i.kt)("strong",{parentName:"li"},"generateArchethicAddress(uint8_t hash_type, uint32_t address_index, uint8_t ","*","encoded_wallet, uint8_t ","*","wallet_len, uint32_t sequence_no, uint8_t ","*","address, uint8_t ","*","address_len)")),(0,i.kt)("li",{parentName:"ul"},"For now only support hash_type ",(0,i.kt)("inlineCode",{parentName:"li"},"sha256")),(0,i.kt)("li",{parentName:"ul"},"Returns address in ",(0,i.kt)("inlineCode",{parentName:"li"},"uint8_t *address"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"It generates key from the encoded wallet and storesit in ",(0,i.kt)("inlineCode",{parentName:"li"},"cx_ecfp_public_key_t")," structure"),(0,i.kt)("li",{parentName:"ul"},"Fn Signature ",(0,i.kt)("strong",{parentName:"li"},"generateKeyFromWallet(address_index, encoded_wallet, wallet_len, sequence_no, &curve_type, NULL, &publicKey)")," ",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Derives Archethic Keypair depending on the supplied params:",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"coin_type")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"account")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"curve")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"address_index")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"publicKey")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"privateKey"))))))))))))))),(0,i.kt)("h2",{id:"sign-transaction"},"SIGN TRANSACTION"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://github.com/archethic-foundation/archethic-ledger/blob/master/src/signHash.c"},"Source File: signHash.c")),(0,i.kt)("admonition",{type:"info"},(0,i.kt)("p",{parentName:"admonition"},"Returns APDU response as ",(0,i.kt)("inlineCode",{parentName:"p"},"Transaction Hash | Public Key | ASN_DER_SIGN")," in success")),(0,i.kt)("p",null,"INS = 08\naddress_index = 4 bytes (bip44)"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Funcion Signature:\n",(0,i.kt)("strong",{parentName:"li"},"handleSignHash(uint8_t p1, uint8_t p2, uint8_t *dataBuffer, uint16_t dataLength, volatile unsigned int ","*","flags)"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"First 4 bytes are address index hence we store then in ",(0,i.kt)("inlineCode",{parentName:"li"},"address_index")," from the data buffer (Converting them according to thier byte ordering.)"),(0,i.kt)("li",{parentName:"ul"},"Then we check for addresslength ",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"if %2 == 0 then SHA256 or SHA3_256 and length = 34"),(0,i.kt)("li",{parentName:"ul"},"if %2 == 1 then SHA512 or SHA3_512 and length = 66"))),(0,i.kt)("li",{parentName:"ul"},"We copy the recieverAddress upto the addressLength in previous step to ",(0,i.kt)("inlineCode",{parentName:"li"},"g_tx.recieverAddr")),(0,i.kt)("li",{parentName:"ul"},"Then get next 8 bytes as amount and convert it to big endian",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Then for display convert it to float and set in ",(0,i.kt)("inlineCode",{parentName:"li"},"g_amount")," for display"))),(0,i.kt)("li",{parentName:"ul"},"performECDH to get ecdhPointX ",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"We performECDH to get the secret pointX on the curve,",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Fn Signature ",(0,i.kt)("strong",{parentName:"li"},"performECDH(uint8_t ","*","ephPublicKey, uint8_t ephPublicKeySize, uint8_t ","*","ecdhPointX)")),(0,i.kt)("li",{parentName:"ul"},"This derives an Archethic keypair first with function ",(0,i.kt)("inlineCode",{parentName:"li"},"deriveArchethicKeyPair")," and gets originPrivateKey"),(0,i.kt)("li",{parentName:"ul"},"The performs ecdh with function ",(0,i.kt)("inlineCode",{parentName:"li"},"cx_ecdh")," with the originPrivateKey and takes publickey and finds the ecdhPointX "),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"cx_ecdh(&originPrivateKey, CX_ECDH_X, ephPublicKey, ephPublicKeySize, ecdhPointX, 32);")))))),(0,i.kt)("li",{parentName:"ul"},"Now we decrypt the wallet with the ecdhPointX ",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Fn Signature ",(0,i.kt)("strong",{parentName:"li"},"decryptWallet(ecdhPointX, sizeof(ecdhPointX), dataBuffer, dataLength, g_wallet.encodedWallet, &g_wallet.walletLen);")),(0,i.kt)("li",{parentName:"ul"},"Since we have moved pointer we now only have ",(0,i.kt)("inlineCode",{parentName:"li"},"auth_tag")," 16 bytes and enc($wk_{aes}$) 32bytes",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Inside Decrypt wallet we first calculate the ",(0,i.kt)("inlineCode",{parentName:"li"},"aes_key_iv_tag")," from the ecdhPointX by double hashing it from the sha512 function $sha512(sha512(ecdh","_","secret\\ or\\ PointX))$. "),(0,i.kt)("li",{parentName:"ul"},"we get 3 parts from above double hashing in 64 bytes which are",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"aes_key")," ","[32bytes]"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"iv")," ","[16bytes]"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"auth_seed")," ","[16bytes]"))),(0,i.kt)("li",{parentName:"ul"},"Now we get sha256 has of auth_seed in ",(0,i.kt)("inlineCode",{parentName:"li"},"auth_key")),(0,i.kt)("li",{parentName:"ul"},"And now we do hmac(auth",(0,i.kt)("em",{parentName:"li"},"key , enc($wk"),"{aes}$)) and get ",(0,i.kt)("inlineCode",{parentName:"li"},"auth_tag")," which are first 16 bytes from hmac result. $Rest\\ 16\\ bytes\\ are\\ reserved$"),(0,i.kt)("li",{parentName:"ul"},"Now we compare if auth_tag equals to auth_tag supplied in the ",(0,i.kt)("inlineCode",{parentName:"li"},"dataBuffer")," ",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"If if doesn't return ",(0,i.kt)("inlineCode",{parentName:"li"},"0xBADDECODE")),(0,i.kt)("li",{parentName:"ul"},"If it does",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Decrypt the wallet and return the ",(0,i.kt)("strong",{parentName:"li"},"encoded wallet")))))))))),(0,i.kt)("li",{parentName:"ul"},"Now Generate Archethic Address from the Encoded Wallet and set as required. ",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Fn Signature ",(0,i.kt)("strong",{parentName:"li"},"generateArchethicAddress(uint8_t hash_type, uint32_t address_index, uint8_t ","*","encoded_wallet, uint8_t ","*","wallet_len, uint32_t sequence_no, uint8_t ","*","address, uint8_t ","*","address_len)")),(0,i.kt)("li",{parentName:"ul"},"For now only support hash_type ",(0,i.kt)("inlineCode",{parentName:"li"},"sha256")),(0,i.kt)("li",{parentName:"ul"},"Returns address in ",(0,i.kt)("inlineCode",{parentName:"li"},"uint8_t *address")))),(0,i.kt)("li",{parentName:"ul"},"Now get the BIP44Paths from the encoded wallet according to specificaton",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Fn Signature ",(0,i.kt)("strong",{parentName:"li"},"getBIP44Path(address_index, g_wallet.encodedWallet, g_wallet.walletLen, 0, g_bip44_path, &bip44pathlen);")),(0,i.kt)("li",{parentName:"ul"},"This does according to address index which were first 4 bytes of ",(0,i.kt)("inlineCode",{parentName:"li"},"dataBuffer")),(0,i.kt)("li",{parentName:"ul"},"This returns the bip44Path in ",(0,i.kt)("inlineCode",{parentName:"li"},"char* string_bip_44")))),(0,i.kt)("li",{parentName:"ul"},"Next we calulate the transactionHash",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Function Signature\n",(0,i.kt)("strong",{parentName:"li"},"getTransactionHash(uint8_t ","*","senderAddr, uint8_t senderAddrLen,\nuint8_t ","*","receiveAddr, uint8_t receiveAddrLen,\nuint8_t ","*","amount, uint8_t ","*","txHash, uint8_t ","*","txHashLen)")),(0,i.kt)("li",{parentName:"ul"},"Format for Transaction Hash Generation",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"tx_version | senderAddr | tx_type | code_size | content_size | ownership_length | total_uco_transfers | recieverAddr | amount | total_token_transfers | recipients"))),(0,i.kt)("li",{parentName:"ul"},"We apply ",(0,i.kt)("inlineCode",{parentName:"li"},"cx_hash_sha256()")," and return the hash in ",(0,i.kt)("inlineCode",{parentName:"li"},"txHash")))),(0,i.kt)("li",{parentName:"ul"},"We prompt user in GUI to approve the transaction"),(0,i.kt)("li",{parentName:"ul"},"Once approve we performECDSA on the transactionHash",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Function Signature\n",(0,i.kt)("strong",{parentName:"li"},"performECDSA(uint8_t ","*","txHash, uint8_t txHashLen, uint32_t address_index, uint8_t ","*","encoded_wallet, uint8_t ","*","wallet_len, uint8_t sequence_no, uint8_t ","*","asn_sign, uint8_t ","*","sign_len)")),(0,i.kt)("li",{parentName:"ul"},"We generateKey from Wallet Similar to when getting address and give back ",(0,i.kt)("inlineCode",{parentName:"li"},"publicKey")," and ",(0,i.kt)("inlineCode",{parentName:"li"},"privateKey")),(0,i.kt)("li",{parentName:"ul"},"We copy curve_type on asn_sign buffer"),(0,i.kt)("li",{parentName:"ul"},"We set 0 to signify onchain wallet"),(0,i.kt)("li",{parentName:"ul"},"We copy the publicKey on asn_sign buffer"),(0,i.kt)("li",{parentName:"ul"},"We sign the txnHash with the privateKet and append signature to asn_sign buffer "),(0,i.kt)("li",{parentName:"ul"},"We increase sign_len by publicKey length + 2 bytes"))),(0,i.kt)("li",{parentName:"ul"},"Once signature is performed we copy the txnHash to the ",(0,i.kt)("inlineCode",{parentName:"li"},"G_io_apdu_buffer")),(0,i.kt)("li",{parentName:"ul"},"Then, we copy the contents of encodedWallet on which we have overwritten the signature to the ",(0,i.kt)("inlineCode",{parentName:"li"},"G_io_apdu_buffer")),(0,i.kt)("li",{parentName:"ul"},"And we return the APDU with SW_OK and total length as ",(0,i.kt)("inlineCode",{parentName:"li"},"txnhash length + walletLen"))))))}c.isMDXComponent=!0},8209:(e,t,n)=>{n(67294)}}]);