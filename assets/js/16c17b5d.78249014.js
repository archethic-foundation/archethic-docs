"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[7741],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>h});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),c=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=c(e.components);return a.createElement(l.Provider,{value:t},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),d=c(n),m=r,h=d["".concat(l,".").concat(m)]||d[m]||u[m]||i;return n?a.createElement(h,o(o({ref:t},p),{},{components:n})):a.createElement(h,o({ref:t},p))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[d]="string"==typeof e?e:r,o[1]=s;for(var c=2;c<i;c++)o[c]=n[c];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},76563:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>u,frontMatter:()=>i,metadata:()=>s,toc:()=>c});var a=n(87462),r=(n(67294),n(3905));n(8209);const i={id:"transaction-chain",title:"Transaction chains",sidebar_position:4},o=void 0,s={unversionedId:"learn/transaction-chain",id:"learn/transaction-chain",title:"Transaction chains",description:"In the Archethic network, there are no blocks but only transactions, as each block is reduced to its atomic form - transaction with its own validation evidences.",source:"@site/docs/learn/transaction-chain.md",sourceDirName:"learn",slug:"/learn/transaction-chain",permalink:"/learn/transaction-chain",draft:!1,tags:[],version:"current",lastUpdatedAt:1722787035,formattedLastUpdatedAt:"Aug 4, 2024",sidebarPosition:4,frontMatter:{id:"transaction-chain",title:"Transaction chains",sidebar_position:4},sidebar:"docs",previous:{title:"Patents",permalink:"/learn/patents"},next:{title:"Transaction fees",permalink:"/learn/fee"}},l={},c=[{value:"Principles",id:"principles",level:2},{value:"Transaction structure",id:"transaction-structure",level:2}],p={toc:c},d="wrapper";function u(e){let{components:t,...n}=e;return(0,r.kt)(d,(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"In the Archethic network, there are no blocks but only transactions, as each block is reduced to its atomic form - ",(0,r.kt)("inlineCode",{parentName:"p"},"transaction")," with its own validation evidences."),(0,r.kt)("h2",{id:"principles"},"Principles"),(0,r.kt)("admonition",{title:"Liveness",type:"note"},(0,r.kt)("p",{parentName:"admonition"},"Each validated transaction is stored as a chain than can only be updated from the last validation transaction in the chain\nThe last transaction on a chain becomes the ",(0,r.kt)("em",{parentName:"p"},"authoritative")," transaction.")),(0,r.kt)("admonition",{title:"Quantum resistant",type:"note"},(0,r.kt)("p",{parentName:"admonition"},"For security reason, once the public key is disclosed, it is considered as expired, only the hash of the public key of the next transaction(aka ",(0,r.kt)("inlineCode",{parentName:"p"},"address"),") is announced.\nThis allows the next public key to be kept until the next transaction on the chain.")),(0,r.kt)("admonition",{title:"Address resolution",type:"note"},(0,r.kt)("p",{parentName:"admonition"},"Any addresses of a transaction chain can be used as destination address.\nIt's not necessary to specify the last transaction address in the chain.")),(0,r.kt)("admonition",{title:"Stateless transactions",type:"note"},(0,r.kt)("p",{parentName:"admonition"},"Transaction are using an ",(0,r.kt)("em",{parentName:"p"},"UTXO")," (Unspent Transaction Output) model so, a transaction cannot change state.\nThere is no reality outside the validated transactions")),(0,r.kt)("admonition",{title:"UTXO mining",type:"note"},(0,r.kt)("p",{parentName:"admonition"},"List of unspent outputs does not need to be specified by the sender of the transaction\nall unspent outputs will be reintegrated directly into the last transaction.")),(0,r.kt)("h2",{id:"transaction-structure"},"Transaction structure"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("h3",{parentName:"li",id:"pending-transaction"},"Pending transaction"))),(0,r.kt)("p",null,"A pending transaction is a transaction that does not have validation.\nIts structure is described as below:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"|-----------|------|------|---------------------|--------------------|------------------|\n| Address   | Type    | Data     | Previous public key | Previous signature | Origin signature |\n| --------- | ------- | -------- | ------------------- | ------------------ | ---------------- |\n|           |\n|           |\n| --------- | ------  | -------- | ------------        | ------------       |\n| Content   | Code    | Ledger   | Ownerships          | Recipients         |\n| --------- | ------  | -------- | ------------        | ------------       |\n|           |\n|           |\n| -----     | ------- |          | -----------------   | --------           |\n| UCO       | Token   |          | Authorized keys     | Secret             |\n| -----     | ------- |          | -----------------   | --------           |\n\n\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Address: Corresponds to the hash of the public key of the transaction")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Type: Defines the functional role of the transaction")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Data: Contains all the operations to be performed (transfers, smart contracts, key authorizations, etc.)"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Content: Can contain any kind of data. It can be used to host some data (HTML page, text, image, code, etc.)"),(0,r.kt)("li",{parentName:"ul"},"Code: Defines the smart contract code to be interpreted by the node. More details on ",(0,r.kt)("a",{parentName:"li",href:"/build/smart-contracts"},"Smart-Contracts")," section."),(0,r.kt)("li",{parentName:"ul"},"Ledger: Defines several types of ledger operations",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"UCO: for the cryptocurrency transfers"),(0,r.kt)("li",{parentName:"ul"},"Token: for non-financial transactions (intended for P2P uses - as tokens, loyalties, etc.)"))),(0,r.kt)("li",{parentName:"ul"},"Ownerships: Define some cryptographic authorizations and delegations",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Authorized keys: list of authorized keys to be able to decrypt secrets"),(0,r.kt)("li",{parentName:"ul"},"Secrets: Encrypted contents which can be decrypted by the authorized keys"))),(0,r.kt)("li",{parentName:"ul"},"Recipients: Additional recipients to target smart contracts"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Previous public key: Corresponds to the public key associated to the previous transaction")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Previous signature: Corresponds to the signature of the private key associated with the mentioned previous public key")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Origin signature: Corresponds to the signature of the device or software that generated the transaction. This is used on the ",(0,r.kt)("a",{parentName:"p",href:"/learn/arch-consensus/proof-of-work"},"Proof Of Work")," mechanism and is a necessary condition of its validation.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("h3",{parentName:"li",id:"validated-transaction"},"Validated transaction"))),(0,r.kt)("p",null,"A validated transaction is a pending transaction completed with the validation proofs required by the Heuristic Algorithms.\nThose are defined by the given structure:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"|------------------|-------------------------|\n| Validation Stamp | Cross Validation Stamps |\n| ---------------- | ----------------------- |\n|                  |\n|                  | -----------------       | -----------          |\n|                  | Node public key         | Signature            |\n|                  | -----------------       | -----------          |\n|                  |\n| -----------      | ---------------         | -------------------- | ------------------- | ------------------- | ------------ | -------- | ----------- |\n| Timestamp        | Proof of Work           | Proof of Integrity   | Proof of Election   | Ledger Operations   | Recipients   | Errors   | Signature   |\n| -----------      | ---------------         | -------------------- | ------------------- | ------------------- | ------------ | -------- | ----------- |\n|                  |\n| -----            | ----------------------- | -----------------    |\n| Fee              | Transaction movements   | Unspent outputs      |\n| -----            | ----------------------- | -----------------    |\n\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Validation Stamp: Stamp generated by the coordinator node",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Proof of work: Corresponds to the public key matching the origin signature (More details on the ",(0,r.kt)("a",{parentName:"li",href:"/learn/arch-consensus/proof-of-work"},"Proof of Work")," section)."),(0,r.kt)("li",{parentName:"ul"},"Proof of integrity: Proves the linkage of the previous transactions"),(0,r.kt)("li",{parentName:"ul"},"Proof of election: Proves the validation node's rotating election and permit to reproduce it later (See ",(0,r.kt)("a",{parentName:"li",href:"/learn/arch-consensus#rotating-election"},"Rotating Election"),")"),(0,r.kt)("li",{parentName:"ul"},"Ledger operations: Contains all the ledger operations that will be taken into account by the network",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"fee: Transaction's fee"),(0,r.kt)("li",{parentName:"ul"},"transaction movements: Issuer and resolved transaction movements"),(0,r.kt)("li",{parentName:"ul"},"Unspent outputs: List of the remaining unspent outputs of the transaction chain after validation"))),(0,r.kt)("li",{parentName:"ul"},"Recipients: List of resolved addresses of the recipients"),(0,r.kt)("li",{parentName:"ul"},"Errors: Any errors found in the validation (i.e. pending transaction error)"),(0,r.kt)("li",{parentName:"ul"},"Signature: Cryptographic signature of the entire stamp by the coordinator's key"))),(0,r.kt)("li",{parentName:"ul"},"Cross validation stamps: To be considered as validated, the ",(0,r.kt)("inlineCode",{parentName:"li"},"Validation Stamp")," must be joined as many ",(0,r.kt)("inlineCode",{parentName:"li"},"Cross Validation Stamp")," as required by the Heuristic Algorithms.\nThey are signatures of the given validation stamp.",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Node public key: Correspond to the node's public key which generate this ",(0,r.kt)("inlineCode",{parentName:"li"},"Cross Validation Stamp"),"'s signature"),(0,r.kt)("li",{parentName:"ul"},"Signature: Correspond to the signature of the ",(0,r.kt)("inlineCode",{parentName:"li"},"Cross Validation Stamp")," for the mentioned public key"),(0,r.kt)("li",{parentName:"ul"},"Inconsistencies: In case of inconsistencies or disagreement, it will contain a list of inconsistencies noted")))))}u.isMDXComponent=!0},8209:(e,t,n)=>{n(67294)}}]);