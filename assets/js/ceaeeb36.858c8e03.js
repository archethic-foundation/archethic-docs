"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[2323],{3905:(e,t,r)=>{r.d(t,{Zo:()=>s,kt:()=>f});var n=r(67294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function c(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var l=n.createContext({}),p=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},s=function(e){var t=p(e.components);return n.createElement(l.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,s=c(e,["components","mdxType","originalType","parentName"]),u=p(r),m=a,f=u["".concat(l,".").concat(m)]||u[m]||d[m]||o;return r?n.createElement(f,i(i({ref:t},s),{},{components:r})):n.createElement(f,i({ref:t},s))}));function f(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,i=new Array(o);i[0]=m;var c={};for(var l in t)hasOwnProperty.call(t,l)&&(c[l]=t[l]);c.originalType=e,c[u]="string"==typeof e?e:a,i[1]=c;for(var p=2;p<o;p++)i[p]=r[p];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},50472:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>d,frontMatter:()=>o,metadata:()=>c,toc:()=>p});var n=r(87462),a=(r(67294),r(3905));r(8209);const o={id:"code-proposals-cd",title:"CD"},i=void 0,c={unversionedId:"build/core/governance/code-proposals-cd",id:"build/core/governance/code-proposals-cd",title:"CD",description:"The archethic-cd target produces an image capable of running archethic_node release.",source:"@site/docs/build/core/governance/cd.md",sourceDirName:"build/core/governance",slug:"/build/core/governance/code-proposals-cd",permalink:"/build/core/governance/code-proposals-cd",draft:!1,tags:[],version:"current",lastUpdatedAt:1744122402,formattedLastUpdatedAt:"Apr 8, 2025",frontMatter:{id:"code-proposals-cd",title:"CD"},sidebar:"docs",previous:{title:"Election",permalink:"/build/core/election"},next:{title:"CI",permalink:"/build/core/governance/code-proposals-ci"}},l={},p=[],s={toc:p},u="wrapper";function d(e){let{components:t,...r}=e;return(0,a.kt)(u,(0,n.Z)({},s,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"archethic-cd")," target produces an image capable of running ",(0,a.kt)("inlineCode",{parentName:"p"},"archethic_node")," release.\nThe objective of cd is to test the code proposal in a testnet environment which means spawning:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"5 nodes that run the new version"),(0,a.kt)("li",{parentName:"ul"},"2 validator containers"),(0,a.kt)("li",{parentName:"ul"},"1 prometheus container"),(0,a.kt)("li",{parentName:"ul"},"1 benchmark container")),(0,a.kt)("p",null,"the cd happens in multiple steps:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"first we start by copying the upgrade release and the logs we created in the CI part to a tmp folder"),(0,a.kt)("li",{parentName:"ul"},"next we create the subnet and we start all the containers responsible for the CD"),(0,a.kt)("li",{parentName:"ul"},"The validator container ensures that every node is up and do a benchmark before we apply the upgrade"),(0,a.kt)("li",{parentName:"ul"},"We apply the upgrade"),(0,a.kt)("li",{parentName:"ul"},"we start the second round of validation which is responsible for running benchmarks again, running the playbooks and gathering metrics from prometheus."),(0,a.kt)("li",{parentName:"ul"},"we wait for the final validation message and we clean all containers and images we created.")),(0,a.kt)("p",null,"nb: the cleaning phase will happen even in the case of failure."))}d.isMDXComponent=!0},8209:(e,t,r)=>{r(67294)}}]);