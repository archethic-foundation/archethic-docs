"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[4082],{3905:(e,t,a)=>{a.d(t,{Zo:()=>s,kt:()=>d});var r=a(67294);function n(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function l(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,r)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?l(Object(a),!0).forEach((function(t){n(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,r,n=function(e,t){if(null==e)return{};var a,r,n={},l=Object.keys(e);for(r=0;r<l.length;r++)a=l[r],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)a=l[r],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var c=r.createContext({}),p=function(e){var t=r.useContext(c),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},s=function(e){var t=p(e.components);return r.createElement(c.Provider,{value:t},e.children)},h="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var a=e.components,n=e.mdxType,l=e.originalType,c=e.parentName,s=o(e,["components","mdxType","originalType","parentName"]),h=p(a),m=n,d=h["".concat(c,".").concat(m)]||h[m]||u[m]||l;return a?r.createElement(d,i(i({ref:t},s),{},{components:a})):r.createElement(d,i({ref:t},s))}));function d(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var l=a.length,i=new Array(l);i[0]=m;var o={};for(var c in t)hasOwnProperty.call(t,c)&&(o[c]=t[c]);o.originalType=e,o[h]="string"==typeof e?e:n,i[1]=o;for(var p=2;p<l;p++)i[p]=a[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,a)}m.displayName="MDXCreateElement"},24615:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>u,frontMatter:()=>l,metadata:()=>o,toc:()=>p});var r=a(87462),n=(a(67294),a(3905));a(8209);const l={id:"crypto",title:"Crypto module",sidebar_label:"Crypto"},i=void 0,o={unversionedId:"build/smart-contracts/language/library/crypto",id:"build/smart-contracts/language/library/crypto",title:"Crypto module",description:"The Crypto module contains functions that deal with cryptography.",source:"@site/docs/build/smart-contracts/language/library/crypto.md",sourceDirName:"build/smart-contracts/language/library",slug:"/build/smart-contracts/language/library/crypto",permalink:"/build/smart-contracts/language/library/crypto",draft:!1,tags:[],version:"current",lastUpdatedAt:1736245107,formattedLastUpdatedAt:"Jan 7, 2025",frontMatter:{id:"crypto",title:"Crypto module",sidebar_label:"Crypto"},sidebar:"docs",previous:{title:"Contract",permalink:"/build/smart-contracts/language/library/contract"},next:{title:"Evm",permalink:"/build/smart-contracts/language/library/evm"}},c={},p=[{value:"hash/1",id:"hash1",level:3},{value:"hash/2",id:"hash2",level:3},{value:"hmac/1",id:"hmac1",level:3},{value:"hmac/2",id:"hmac2",level:3},{value:"hmac/3",id:"hmac3",level:3},{value:"sign_with_recovery/1",id:"sign_with_recovery1",level:3},{value:"decrypt_with_storage_nonce/1",id:"decrypt_with_storage_nonce1",level:3}],s={toc:p},h="wrapper";function u(e){let{components:t,...a}=e;return(0,n.kt)(h,(0,r.Z)({},s,a,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("p",null,"The ",(0,n.kt)("inlineCode",{parentName:"p"},"Crypto")," module contains functions that deal with cryptography."),(0,n.kt)("h3",{id:"hash1"},"hash/1"),(0,n.kt)("p",null,"Equivalent to ",(0,n.kt)("a",{parentName:"p",href:"#hash2"},"hash/2"),' with the second argument "sha256".'),(0,n.kt)("h3",{id:"hash2"},"hash/2"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-elixir"},'Crypto.hash("my text", "sha256") # "7330D2B39CA35EA..."\nCrypto.hash("my text", "sha512") # "A3D7E45A0D9BE5F..."\n')),(0,n.kt)("p",null,"Parameters:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"str")," the text to hash"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"algo"),' the hash algorithm ("sha256", "sha512", "sha3_256", "sha3_512", "blake2b", "keccak256")')),(0,n.kt)("p",null,"Returns the hash of ",(0,n.kt)("inlineCode",{parentName:"p"},"str")," by using ",(0,n.kt)("inlineCode",{parentName:"p"},"algo")," algorithm."),(0,n.kt)("h3",{id:"hmac1"},"hmac/1"),(0,n.kt)("p",null,"Equivalent to ",(0,n.kt)("a",{parentName:"p",href:"#hmac2"},"hmac/2"),' with the second argument "sha256".'),(0,n.kt)("h3",{id:"hmac2"},"hmac/2"),(0,n.kt)("p",null,"Equivalent to ",(0,n.kt)("a",{parentName:"p",href:"#hmac3"},"hmac/3")," with the third argument being a key created from the contract seed and secret data known by nodes.\nThe key created is deterministic and will always be the same for a contract."),(0,n.kt)("h3",{id:"hmac3"},"hmac/3"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-elixir"},'Crypto.hmac("my text") # "374C7527733556..."\nCrypto.hmac("my text", "sha256") # "374C7527733556..."\nCrypto.hmac("my text", "sha256", "secret_key") # "901A365FF22B895..."\n')),(0,n.kt)("p",null,"Parameters:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"data")," the data to hash (if the data is hexadecimal it will be decoded in binary)"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"algo"),' the hash algorithm ("sha256", "sha512", "sha3_256", "sha3_512")'),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"key")," the key to perform the hmac (if the data is hexadecimal it will be decoded in binary)")),(0,n.kt)("p",null,"Returns the hmac of ",(0,n.kt)("inlineCode",{parentName:"p"},"data")," with ",(0,n.kt)("inlineCode",{parentName:"p"},"key")," using ",(0,n.kt)("inlineCode",{parentName:"p"},"algo"),"."),(0,n.kt)("h3",{id:"sign_with_recovery1"},"sign_with_recovery/1"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-elixir"},'signature_payload = Crypto.hash("tintin", "keccak256")\nCrypto.sign_with_recovery(signature_payload) # [r: "00ABCD...", s: "00BCDE...", v: 0]\n')),(0,n.kt)("p",null,"Parameters:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"hash")," the hash to sign")),(0,n.kt)("p",null,"Return a signature of the given ",(0,n.kt)("inlineCode",{parentName:"p"},"hash"),"."),(0,n.kt)("h3",{id:"decrypt_with_storage_nonce1"},"decrypt_with_storage_nonce/1"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-elixir"},"ciphertext = 0x374C7527733556\nCrypto.decrypt_with_storage_nonce(ciphertext) # Clear text\n")),(0,n.kt)("p",null,"Parameters:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"ciphertext")," The encrypted data to decrypt")),(0,n.kt)("p",null,"Return the cleartext out from the decryption algorithm"))}u.isMDXComponent=!0},8209:(e,t,a)=>{a(67294)}}]);