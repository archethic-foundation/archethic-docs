"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[5169],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>v});var s=t(67294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);n&&(s=s.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,s)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,s,a=function(e,n){if(null==e)return{};var t,s,a={},r=Object.keys(e);for(s=0;s<r.length;s++)t=r[s],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(s=0;s<r.length;s++)t=r[s],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var c=s.createContext({}),l=function(e){var n=s.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},p=function(e){var n=l(e.components);return s.createElement(c.Provider,{value:n},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return s.createElement(s.Fragment,{},n)}},m=s.forwardRef((function(e,n){var t=e.components,a=e.mdxType,r=e.originalType,c=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),d=l(t),m=a,v=d["".concat(c,".").concat(m)]||d[m]||u[m]||r;return t?s.createElement(v,i(i({ref:n},p),{},{components:t})):s.createElement(v,i({ref:n},p))}));function v(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var r=t.length,i=new Array(r);i[0]=m;var o={};for(var c in n)hasOwnProperty.call(n,c)&&(o[c]=n[c]);o.originalType=e,o[d]="string"==typeof e?e:a,i[1]=o;for(var l=2;l<r;l++)i[l]=t[l];return s.createElement.apply(null,i)}return s.createElement.apply(null,t)}m.displayName="MDXCreateElement"},93410:(e,n,t)=>{t.r(n),t.d(n,{Subscription:()=>p,UserConfirmation:()=>d,assets:()=>c,contentTitle:()=>i,default:()=>v,frontMatter:()=>r,metadata:()=>o,toc:()=>l});var s=t(87462),a=(t(67294),t(3905));t(8209);const r={id:"rpc-commands",title:"RPC Commands",sidebar_label:"RPC Commands"},i=void 0,o={unversionedId:"build/dapp/rpc-commands",id:"build/dapp/rpc-commands",title:"RPC Commands",description:"Here is a description of all RPC commands available.",source:"@site/docs/build/dapp/07-available-commands.mdx",sourceDirName:"build/dapp",slug:"/build/dapp/rpc-commands",permalink:"/build/dapp/rpc-commands",draft:!1,tags:[],version:"current",lastUpdatedAt:1743577716,formattedLastUpdatedAt:"Apr 2, 2025",sidebarPosition:7,frontMatter:{id:"rpc-commands",title:"RPC Commands",sidebar_label:"RPC Commands"},sidebar:"docs",previous:{title:"Signing transaction",permalink:"/build/dapp/signing-transaction"},next:{title:"FAQ",permalink:"/build/dapp/faq"}},c={},l=[{value:"get_endpoint",id:"get_endpoint",level:2},{value:"Request",id:"request",level:3},{value:"Success Response",id:"success-response",level:3},{value:"refresh_current_account",id:"refresh_current_account",level:2},{value:"Request",id:"request-1",level:3},{value:"Success Response",id:"success-response-1",level:3},{value:"get_accounts",id:"get_accounts",level:2},{value:"Request",id:"request-2",level:3},{value:"Success Response",id:"success-response-2",level:3},{value:"send_transaction",id:"send_transaction",level:2},{value:"Request",id:"request-3",level:3},{value:"Success Response",id:"success-response-3",level:3},{value:"add_service",id:"add_service",level:2},{value:"Request",id:"request-4",level:3},{value:"Success Response",id:"success-response-4",level:3},{value:"remove_service",id:"remove_service",level:2},{value:"Request",id:"request-5",level:3},{value:"Success Response",id:"success-response-5",level:3},{value:"get_services_from_keychain",id:"get_services_from_keychain",level:2},{value:"Request",id:"request-6",level:3},{value:"Success Response",id:"success-response-6",level:3},{value:"keychain_derive_keypair",id:"keychain_derive_keypair",level:2},{value:"Request",id:"request-7",level:3},{value:"Success Response",id:"success-response-7",level:3},{value:"keychain_derive_address",id:"keychain_derive_address",level:2},{value:"Request",id:"request-8",level:3},{value:"Success Response",id:"success-response-8",level:3},{value:"get_current_account",id:"get_current_account",level:2},{value:"Request",id:"request-9",level:3},{value:"Success Response",id:"success-response-9",level:3},{value:"sign_transactions",id:"sign_transactions",level:2},{value:"Request",id:"request-10",level:3},{value:"Success Response",id:"success-response-10",level:3},{value:"sign_payloads",id:"sign_payloads",level:2},{value:"Request",id:"request-11",level:3},{value:"Success Response",id:"success-response-11",level:3},{value:"encrypt_payloads",id:"encrypt_payloads",level:2},{value:"Request",id:"request-12",level:3},{value:"Success Response",id:"success-response-12",level:3},{value:"decrypt_payloads",id:"decrypt_payloads",level:2},{value:"Request",id:"request-13",level:3},{value:"Success Response",id:"success-response-13",level:3},{value:"subscribe_account",id:"subscribe_account",level:2},{value:"Subscription",id:"subscription",level:3},{value:"Notifications",id:"notifications",level:3},{value:"subscribe_current_account",id:"subscribe_current_account",level:2},{value:"Subscription",id:"subscription-1",level:3},{value:"Notifications",id:"notifications-1",level:3}];function p(){return(0,a.kt)("img",{src:"https://img.shields.io/badge/Subscription-05a5dc",alt:"Subscription command"})}function d(){return(0,a.kt)("img",{src:"https://img.shields.io/badge/User Confirmation-e66a63",alt:"Requires user confirmation"})}const u={toc:l,Subscription:p,UserConfirmation:d},m="wrapper";function v(e){let{components:n,...t}=e;return(0,a.kt)(m,(0,s.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"Here is a description of all RPC commands available. "),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"http://localhost:9000/build/dapp/introduction#tools-and-libraries"},"Official SDKs")," support all of these. To get more detailed info, refer to your SDK documentation."),(0,a.kt)("admonition",{type:"info"},(0,a.kt)("p",{parentName:"admonition"},"Subscriptions won't be available on Deeplink channel because of technical limitations.")),(0,a.kt)("h2",{id:"get_endpoint"},"get_endpoint"),(0,a.kt)("p",null,"Gets the endpoint URL used on AEWallet."),(0,a.kt)("h3",{id:"request"},"Request"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"// no payload in request\n")),(0,a.kt)("h3",{id:"success-response"},"Success Response"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"{\n  endpointUrl: string // Endpoint URL\n}\n")),(0,a.kt)("h2",{id:"refresh_current_account"},"refresh_current_account"),(0,a.kt)("p",null,"Request the wallet to refresh current account info"),(0,a.kt)("h3",{id:"request-1"},"Request"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"// no payload in request\n")),(0,a.kt)("h3",{id:"success-response-1"},"Success Response"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"// no response\n")),(0,a.kt)("h2",{id:"get_accounts"},"get_accounts"),(0,a.kt)("p",null,"Gets the accounts available on AEWallet."),(0,a.kt)("h3",{id:"request-2"},"Request"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"// No payload\n")),(0,a.kt)("h3",{id:"success-response-2"},"Success Response"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"{\n  accounts: [\n    {\n      shortName: string,      // Account name\n      serviceName: string,     // Service name\n      genesisAddress: string, // Genesis address\n    }\n  ]\n}\n")),(0,a.kt)("h2",{id:"send_transaction"},"send_transaction"),(0,a.kt)("p",null,"Signs and sends a transaction."),(0,a.kt)("h3",{id:"request-3"},"Request"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"{\n  type: string,                     // Type of transaction\n  version: number,                  // Version of the transaction (used for backward compatiblity)\n  data: Object,                     // Transaction data zone (identity, keychain, smart contract, etc.)\n  generateEncryptedSeedSC: boolean  // (Optional) : if true, add a encrypted (by storage nonce public key) seed in the transaction's ownerships to allow nodes to manage smart contract\n}\n")),(0,a.kt)("h3",{id:"success-response-3"},"Success Response"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"{\n  transactionAddress: string,  // Sent transaction address.\n  nbConfirmations: number,     // number of received confirmations.\n  maxConfirmations: number,    // Max number of confirmations.\n}\n")),(0,a.kt)("h2",{id:"add_service"},"add_service"),(0,a.kt)(d,{mdxType:"UserConfirmation"}),(0,a.kt)("p",null,"Add a service in the keychain"),(0,a.kt)("h3",{id:"request-4"},"Request"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"{\n  name: string,                 // Name of the service\n}\n")),(0,a.kt)("h3",{id:"success-response-4"},"Success Response"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"{\n  transactionAddress: string,  // Transaction address.\n  nbConfirmations: number,     // number of received confirmations.\n  maxConfirmations: number,    // Max number of confirmations.\n}\n")),(0,a.kt)("h2",{id:"remove_service"},"remove_service"),(0,a.kt)(d,{mdxType:"UserConfirmation"}),(0,a.kt)("p",null,"Remove a service from the keychain"),(0,a.kt)("h3",{id:"request-5"},"Request"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"{\n  name: string,                 // Name of the service\n}\n")),(0,a.kt)("h3",{id:"success-response-5"},"Success Response"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"{\n  transactionAddress: string,  // Transaction address.\n  nbConfirmations: number,     // Number of received confirmations.\n  maxConfirmations: number,    // Max number of confirmations.\n}\n")),(0,a.kt)("h2",{id:"get_services_from_keychain"},"get_services_from_keychain"),(0,a.kt)("p",null,"Gets keychain's services from the keychain connected to AEWallet."),(0,a.kt)("h3",{id:"request-6"},"Request"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"// No payload\n")),(0,a.kt)("h3",{id:"success-response-6"},"Success Response"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"{\n  services: [\n    {\n      derivationPath: string, // Derivation path\n      curve: string,          // Curve\n      hashAlgo: string        // Hash Algo\n    }\n  ]\n}\n")),(0,a.kt)("h2",{id:"keychain_derive_keypair"},"keychain_derive_keypair"),(0,a.kt)("p",null,"Derive a keypair for the given service at the index given and get the public key"),(0,a.kt)("h3",{id:"request-7"},"Request"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"{\n  serviceName: string,  // Service name to identify the derivation path to use\n  index: number,        // Chain index to derive (optional - default to 0)\n  pathSuffix: string    // Additional information to add to a service derivation path (optional - default to empty)\n}\n")),(0,a.kt)("h3",{id:"success-response-7"},"Success Response"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"{\n  publicKey: string     // Public key of the service at the index given\n}\n")),(0,a.kt)("h2",{id:"keychain_derive_address"},"keychain_derive_address"),(0,a.kt)("p",null,"Derive an address for the given service at the index given"),(0,a.kt)("h3",{id:"request-8"},"Request"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"{\n  serviceName: string,  // Service name to identify the derivation path to use\n  index: number,        // Chain index to derive (optional - default to 0)\n  pathSuffix: string    // Additional information to add to a service derivation path (optional - default to empty)\n}\n")),(0,a.kt)("h3",{id:"success-response-8"},"Success Response"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"{\n  address: string     // Address derived\n}\n")),(0,a.kt)("h2",{id:"get_current_account"},"get_current_account"),(0,a.kt)("p",null,"Gets the current account selected on AEWallet."),(0,a.kt)("h3",{id:"request-9"},"Request"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"// No payload\n")),(0,a.kt)("h3",{id:"success-response-9"},"Success Response"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"{\n  shortName: string,      // Account name\n  serviceName: string,    // Service name\n  genesisAddress: string, // Genesis address\n}\n")),(0,a.kt)("h2",{id:"sign_transactions"},"sign_transactions"),(0,a.kt)(d,{mdxType:"UserConfirmation"}),(0,a.kt)("p",null,"Signs many transactions."),(0,a.kt)("h3",{id:"request-10"},"Request"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"{\n  serviceName: string,              // Service name to use to sign the tx\n  pathSuffix: string,               // Additional information to add to a service derivation path (optional)\n  description: {                    // Readable description to explain the purpose of signing transactions (locale + description)\n    en: string,\n    fr: string,\n  },\n  transactions: [\n    {\n      type: string,                 // Type of transaction\n      version: number,              // Version of the transaction (used for backward compatiblity)\n      data: Object                  // Transaction data zone (identity, keychain, smart contract, etc.)\n    }\n  ]\n}\n")),(0,a.kt)("h3",{id:"success-response-10"},"Success Response"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"{\n  signedTxs: [\n    {\n      address: string,              // Address: hash of the new generated public key for the given transaction\n      previousPublicKey: string,    // Previous generated public key matching the previous signature\n      previousSignature: string,    // Signature from the previous public key\n      originSignature: string       // Signature from the device which originated the transaction (used in the Proof of work)\n    }\n  ]\n}\n")),(0,a.kt)("h2",{id:"sign_payloads"},"sign_payloads"),(0,a.kt)(d,{mdxType:"UserConfirmation"}),(0,a.kt)("p",null,"Signs many payloads."),(0,a.kt)("h3",{id:"request-11"},"Request"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"{\n  serviceName: string,       // Service name to use to sign the payload\n  pathSuffix: string,        // Additional information to add to a service derivation path (optional)\n  description: {             // Readable description to explain the purpose of signing payloads (locale + description)\n    en: string,\n    fr: string,\n  },\n  payloads: [\n    {\n      payload: string,       // Payload to sign\n      isHexa: boolean        // Precise if the payload if in hexadecimal format\n    }\n  ]\n}\n")),(0,a.kt)("h3",{id:"success-response-11"},"Success Response"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"{\n  signedPayloads: [\n    {\n      signedPayload: string,        // Signed payload\n    }\n  ]\n}\n")),(0,a.kt)("h2",{id:"encrypt_payloads"},"encrypt_payloads"),(0,a.kt)("p",null,"Encrypt many payloads with account public key."),(0,a.kt)("h3",{id:"request-12"},"Request"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"{\n  serviceName: String,              // Service name to use to encrypt the payload\n  pathSuffix: String,               // Additional information to add to a service derivation path (optional)\n  payloads: [\n    {\n      payload: String,              // Payload to encrypt\n      isHexa: boolean               // Precise if the payload if in hexadecimal format\n    }\n  ]\n}\n")),(0,a.kt)("h3",{id:"success-response-12"},"Success Response"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"{\n  encryptedPayloads: [\n    {\n      encryptedPayload: String,        // Encrypted payload\n    }\n  ]\n}\n")),(0,a.kt)("h2",{id:"decrypt_payloads"},"decrypt_payloads"),(0,a.kt)(d,{mdxType:"UserConfirmation"}),(0,a.kt)("p",null,"Decrypt many payloads with account private key."),(0,a.kt)("h3",{id:"request-13"},"Request"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"{\n  serviceName: String,              // Service name to use to decrypt the payload\n  pathSuffix: String,               // Additional information to add to a service derivation path (optional)\n    description: String {             // Readable description to explain the purpose of decrypting payloads (locale + description)\n    en: String,\n    fr: String,\n  },\n  payloads: [\n    {\n      payload: String,              // Payload to decrypt\n      isHexa: boolean               // Precise if the payload if in hexadecimal format\n    }\n  ]\n}\n")),(0,a.kt)("h3",{id:"success-response-13"},"Success Response"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"{\n  decryptedPayloads: [\n    {\n      decryptedPayload: String,        // Decrypted payload\n    }\n  ]\n}\n")),(0,a.kt)("h2",{id:"subscribe_account"},"subscribe_account"),(0,a.kt)(p,{mdxType:"Subscription"}),(0,a.kt)("p",null,"Listens to any updates on an account."),(0,a.kt)("h3",{id:"subscription"},"Subscription"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"{\n  name: string,              // Service name to use to sign the payload\n}\n")),(0,a.kt)("h3",{id:"notifications"},"Notifications"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"{\n  name: string,\n  genesisAddress: string,\n  lastAddress: string?,\n  balance: {\n    nativeTokenName: string,\n    nativeTokenValue: double,\n  }?,\n}\n")),(0,a.kt)("h2",{id:"subscribe_current_account"},"subscribe_current_account"),(0,a.kt)(p,{mdxType:"Subscription"}),(0,a.kt)("p",null,"Listens to any updates on wallet selected account."),(0,a.kt)("h3",{id:"subscription-1"},"Subscription"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"// no payload in request\n")),(0,a.kt)("h3",{id:"notifications-1"},"Notifications"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"{\n  name: string,\n  genesisAddress: string,\n}\n")))}v.isMDXComponent=!0},8209:(e,n,t)=>{t(67294)}}]);