"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[6],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>h});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},s=Object.keys(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),u=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},d=function(e){var t=u(e.components);return a.createElement(l.Provider,{value:t},e.children)},c="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,s=e.originalType,l=e.parentName,d=i(e,["components","mdxType","originalType","parentName"]),c=u(n),m=r,h=c["".concat(l,".").concat(m)]||c[m]||p[m]||s;return n?a.createElement(h,o(o({ref:t},d),{},{components:n})):a.createElement(h,o({ref:t},d))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var s=n.length,o=new Array(s);o[0]=m;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i[c]="string"==typeof e?e:r,o[1]=i;for(var u=2;u<s;u++)o[u]=n[u];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},96761:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>p,frontMatter:()=>s,metadata:()=>i,toc:()=>u});var a=n(87462),r=(n(67294),n(3905));n(8209);const s={id:"runtime",title:"WASM Runtime",sidebar_label:"Runtime",sidebar_position:1},o=void 0,i={unversionedId:"build/smart-contracts/wasm/runtime",id:"build/smart-contracts/wasm/runtime",title:"WASM Runtime",description:"Archethic enables the execution of smart contracts using WebAssembly",source:"@site/docs/build/smart-contracts/wasm/runtime.md",sourceDirName:"build/smart-contracts/wasm",slug:"/build/smart-contracts/wasm/runtime",permalink:"/build/smart-contracts/wasm/runtime",draft:!1,tags:[],version:"current",lastUpdatedAt:1744288563,formattedLastUpdatedAt:"Apr 10, 2025",sidebarPosition:1,frontMatter:{id:"runtime",title:"WASM Runtime",sidebar_label:"Runtime",sidebar_position:1},sidebar:"docs",previous:{title:"WASM",permalink:"/category/wasm"},next:{title:"Getting Started",permalink:"/build/smart-contracts/wasm/getting-started"}},l={},u=[{value:"Communication",id:"communication",level:2},{value:"Manifest",id:"manifest",level:3},{value:"Reserved types",id:"reserved-types",level:3},{value:"Scalar",id:"scalar",level:4},{value:"Complex",id:"complex",level:4},{value:"Hooks (Reserved functions)",id:"hooks-reserved-functions",level:3},{value:"Memory management",id:"memory-management",level:2},{value:"Host functions",id:"host-functions",level:2},{value:"getBalance (CHAIN)",id:"getbalance-chain",level:3},{value:"Request:",id:"request",level:4},{value:"Response:",id:"response",level:4},{value:"getGenesisAddress (CHAIN)",id:"getgenesisaddress-chain",level:3},{value:"Request",id:"request-1",level:4},{value:"Response:",id:"response-1",level:4},{value:"getFirstTransactionAddress (CHAIN)",id:"getfirsttransactionaddress-chain",level:3},{value:"Request",id:"request-2",level:4},{value:"Response:",id:"response-2",level:4},{value:"getLastAddress (CHAIN)",id:"getlastaddress-chain",level:3},{value:"Request",id:"request-3",level:4},{value:"Response:",id:"response-3",level:4},{value:"getPreviousAddress (CHAIN)",id:"getpreviousaddress-chain",level:3},{value:"Request",id:"request-4",level:4},{value:"Response:",id:"response-4",level:4},{value:"getGenesisPublicKey (CHAIN)",id:"getgenesispublickey-chain",level:3},{value:"Request",id:"request-5",level:4},{value:"Response:",id:"response-5",level:4},{value:"getTransaction (CHAIN)",id:"gettransaction-chain",level:3},{value:"Request",id:"request-6",level:4},{value:"Response:",id:"response-6",level:4},{value:"getLastTransaction (CHAIN)",id:"getlasttransaction-chain",level:3},{value:"Request",id:"request-7",level:4},{value:"Response:",id:"response-7",level:4},{value:"callFunction (CONTRACT)",id:"callfunction-contract",level:3},{value:"Request",id:"request-8",level:4},{value:"Response",id:"response-8",level:4},{value:"hmacWithStorageNonce (CRYPTO)",id:"hmacwithstoragenonce-crypto",level:3},{value:"Request",id:"request-9",level:4},{value:"Response",id:"response-9",level:4},{value:"signWithRecovery (CRYPTO)",id:"signwithrecovery-crypto",level:3},{value:"Request",id:"request-10",level:4},{value:"Response",id:"response-10",level:4},{value:"decryptWithStorageNonce (CRYPTO)",id:"decryptwithstoragenonce-crypto",level:3},{value:"Request",id:"request-11",level:4},{value:"Response",id:"response-11",level:4},{value:"request (HTTP)",id:"request-http",level:3},{value:"Requirements",id:"requirements",level:4},{value:"Request",id:"request-12",level:4},{value:"Response",id:"response-12",level:4},{value:"requestMany (HTTP)",id:"requestmany-http",level:3},{value:"Request",id:"request-13",level:4},{value:"Response",id:"response-13",level:4}],d={toc:u},c="wrapper";function p(e){let{components:t,...n}=e;return(0,r.kt)(c,(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"Archethic enables the execution of smart contracts using WebAssembly"),(0,r.kt)("p",null,"Contracts are defined as WASM modules and can be written in multiple languages."),(0,r.kt)("p",null,"Validators use a WebAssembly (WASM) runtime to execute smart contract code."),(0,r.kt)("p",null,"The runtime is responsible for the following tasks:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Instantiation of the WASM modules"),(0,r.kt)("li",{parentName:"ul"},"Managing communication between the host blockchain and the WASM module."),(0,r.kt)("li",{parentName:"ul"},"Allocating memory for smart contract input and output.")),(0,r.kt)("mermaid",{value:"flowchart LR\n  Transaction --\x3e Runtime\n  Call --\x3e Runtime\n  Runtime <--\x3e WASM\n  Runtime <--\x3e Memory"}),(0,r.kt)("h2",{id:"communication"},"Communication"),(0,r.kt)("p",null,"Interaction between the validation process and the WASM module is facilitated through JSON, to simplify implementation of future SDKs.\nHence smart contract input/output need to be standardized as the code is not discoverable due to the compilation phase of languages."),(0,r.kt)("h3",{id:"manifest"},"Manifest"),(0,r.kt)("p",null,"Every smart contract must define a specification or Application Binary Interface (ABI) defined in the manifest of the smart contract."),(0,r.kt)("p",null,"The manifest is described as a JSON document listing the triggers, the public functions, the input and output types, the type of the state and optional upgrade options."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsonc"},'{\n  "abi": {\n    "state": {\n      "counter": "i32"\n    },\n    "functions": {\n      "increment": {\n        "type": "action",\n        "triggerType": "transaction",\n        "input": {\n          "value": "u32"\n        }\n      },\n      "getFactorial": {\n        "type": "publicFunction",\n        "input": {\n          "from": "u64"\n        },\n        "output": "u64"\n      }\n    }\n  },\n  "upgradeOpts": {\n     "from": "000\u2026\u2026\u2026." // Address allowed to upgrade the contract\n  } \n}\n')),(0,r.kt)("p",null,"With this manifest and without having to execute code, the validators are able to:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"type check the input"),(0,r.kt)("li",{parentName:"ul"},"inform the user and dApps about output and state types"),(0,r.kt)("li",{parentName:"ul"},"enable the upgrability of contract")),(0,r.kt)("h3",{id:"reserved-types"},"Reserved types"),(0,r.kt)("p",null,"Some reserved types are defined and supported by the runtime for validation and casting."),(0,r.kt)("h4",{id:"scalar"},"Scalar"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"u8"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"i8"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"u16"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"i16"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"u32"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"i32"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"u64"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"i64"),": Define any integer"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"string")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"boolean"))),(0,r.kt)("h4",{id:"complex"},"Complex"),(0,r.kt)("p",null,"Complex types are defined and transmitted as JSON to support multiple encoding "),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Address: ",(0,r.kt)("inlineCode",{parentName:"li"},'{ hex: "0000..."}')),(0,r.kt)("li",{parentName:"ul"},"PublicKey: ",(0,r.kt)("inlineCode",{parentName:"li"},'{ hex: "0000..."}')),(0,r.kt)("li",{parentName:"ul"},"Hex: ",(0,r.kt)("inlineCode",{parentName:"li"},'{ hex: "01234..."}'))),(0,r.kt)("h3",{id:"hooks-reserved-functions"},"Hooks (Reserved functions)"),(0,r.kt)("p",null,"WebAssembly smart contract can define any kind of custom functions for transaction and public calls. "),(0,r.kt)("p",null,"However, the runtime can expect some defined reserved functions to leverage hooks to automate some actions in specific period to simplify developer experience.\nSome functions are reserved for this purpose: ",(0,r.kt)("inlineCode",{parentName:"p"},"onInit"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"onUpgrade"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"onInherit")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Function name"),(0,r.kt)("th",{parentName:"tr",align:null},"Purpose"),(0,r.kt)("th",{parentName:"tr",align:null},"Execution context"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"onInit"),(0,r.kt)("td",{parentName:"tr",align:null},"This behaves as a constructor or initializer of the contract\u2019s state"),(0,r.kt)("td",{parentName:"tr",align:null},"During the transaction's validation of the first chain's transaction. ",(0,r.kt)("br",null),"The resulting state will be injected into the transaction\u2019s validation as unspent output")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"onUpgrade"),(0,r.kt)("td",{parentName:"tr",align:null},"As Archethic\u2019s upgrade is native, a specific and magic trigger is supported as ",(0,r.kt)("inlineCode",{parentName:"td"},"code_upgrade")," to correspond to the ",(0,r.kt)("a",{parentName:"td",href:"https://github.com/archethic-foundation/aeip/blob/main/AEIP-22.md"},"AEIP-22 - Smart Contract upgradability spec")," and will replace the new code of the contract"),(0,r.kt)("td",{parentName:"tr",align:null},"During the execution of the ",(0,r.kt)("inlineCode",{parentName:"td"},"code_upgrade")," function to generate the new state to be injected into the transaction\u2019s validation as new unspent output. ",(0,r.kt)("br",null),"The previous state is injected into the function but using the new code to act as migration code for the contract\u2019s state. The resulting state will be injected into the transaction\u2019s validation as unspent output")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"onInherit"),(0,r.kt)("td",{parentName:"tr",align:null},"This function ensures a way to assert some conditions along the chain\u2019s inheritance (i.e. origin family devices, hard-coded rules, etc.)"),(0,r.kt)("td",{parentName:"tr",align:null},"During transaction\u2019s validation to ensure inherit conditions. ",(0,r.kt)("br",null),"No return is expected, it should assert or throw on user\u2019s defined conditions")))),(0,r.kt)("h2",{id:"memory-management"},"Memory management"),(0,r.kt)("p",null,"WASM doesn't support the communication of complex data structure and work with a limit set of opcodes, we have to leverage custom memory management to allow communication in and out for complex structure such as string, list, objects."),(0,r.kt)("p",null,"To facilate it, for each smart contract a dedicated memory process is allocated to ensure communication between the validator (host) and the contract (WASM module)."),(0,r.kt)("mermaid",{value:"sequenceDiagram\n    Transaction->>+Validator: Trigger smart contract\n    Validator->>+Memory: Set the transaction & state as input\n    Validator->>+WASM: Execute the trigger function\n    WASM->>+Validator: Read input size\n    Validator->>+Memory: Fetch size\n    Validator->>+WASM: Send input size\n    WASM->>+Validator: Read byte(offset)\n    Validator->>+Memory: Fetch byte at offset\n    Validator->>+WASM: Send byte\n    WASM->>+WASM: Execute function with transaction & state as argument\n    WASM->>+Validator: Alloc(size)\n    Validator->>+Memory: Extend memory for the given size\n    Validator->>+WASM: Send new offset\n    WASM->>+Validator: Write byte(offset)\n    Validator->>+Memory: Store byte\n    WASM->>+Validator: Set output(offset, size)\n    Validator->>+Memory: Store output bounds\n    WASM->>+Validator: End execution\n    Validator->>+Memory: Read output \n    Validator->>+Transaction: Result (Ok & New State | Error)"}),(0,r.kt)("p",null,"SDK implementations provides functions for WASM module to be imported in order to to read and write into the shared memory."),(0,r.kt)("h2",{id:"host-functions"},"Host functions"),(0,r.kt)("p",null,"Additionally, the runtime supports functions to read external data such as blockchain & off-chain data sources.\nThis works similarly as the memory management by providing functions to import in SDK to allow communication with the validator."),(0,r.kt)("p",null,"I/O requests are encoded as JSON-RPC request to simplify serialization of method & params and allow extensibility."),(0,r.kt)("mermaid",{value:"sequenceDiagram\n    Transaction->>+Validator: Trigger smart contract\n    Validator->>+WASM: Execute the trigger function\n    WASM->>+WASM: Call I/O function\n    WASM->>+Validator: Alloc(JSON-RPC request size)\n    Validator->>+Memory: Extend memory for the request size\n    Validator->>+WASM: Send new offset\n    WASM->>+Validator: Write byte at the offset for the request size\n    Validator->>+Memory: Store bytes\n    WASM->>+Validator: Call RPC I/O function (offset, size)\n    Validator->>+Memory: Read data (offset, size)\n    Validator->>+Validator: Decode request\n    Validator->>+Validator: Fetch blockchain & off-chain data\n    Validator->>+Memory: Alloc(response size)\n    Memory->>+Validator: Offset\n    Validator->>+Memory: Write bytes at offset for the response size\n    Validator->>+WASM: Send offset & size\n    WASM->>+Validator: Read bytes at offset for the response size\n    WASM->>+WASM: ..Continue execution with the response"}),(0,r.kt)("h3",{id:"getbalance-chain"},"getBalance (CHAIN)"),(0,r.kt)("p",null,"Fetch the balance of a given address"),(0,r.kt)("h4",{id:"request"},"Request:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{"method" => "getBalance", "params": {"hex": "0000..."}}\n')),(0,r.kt)("h4",{id:"response"},"Response:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},' {"ok": {"value": {\n  "uco": 1000000,\n  "token": [\n    {\n      "tokenAddress": { "hex": "0000..." },\n      "tokenId": 0,\n      "amount": 10000000000\n    }\n  ]\n}}}\n')),(0,r.kt)("h3",{id:"getgenesisaddress-chain"},"getGenesisAddress (CHAIN)"),(0,r.kt)("p",null,"Fetch the genesis address of the transaction chain that contains a transaction at the address. "),(0,r.kt)("p",null,"If there is no transaction, it returns the given address."),(0,r.kt)("h4",{id:"request-1"},"Request"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{"method": "getGenesisAddress", "params": {"hex": "0000..."}}\n')),(0,r.kt)("h4",{id:"response-1"},"Response:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{"ok":{"value":{ "hex": "0000..."}}}\n')),(0,r.kt)("h3",{id:"getfirsttransactionaddress-chain"},"getFirstTransactionAddress (CHAIN)"),(0,r.kt)("p",null,"Returns the first transaction's address of the transaction chain from the given address."),(0,r.kt)("h4",{id:"request-2"},"Request"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{"method": "getFirstTransactionAddress", "params": {"hex": "0000..."}}\n')),(0,r.kt)("h4",{id:"response-2"},"Response:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{"ok":{ "value":{ "hex": "0000..."}}}\n')),(0,r.kt)("p",null,"If there is no transaction, it raises an error."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{"error": "not found"}\n')),(0,r.kt)("h3",{id:"getlastaddress-chain"},"getLastAddress (CHAIN)"),(0,r.kt)("p",null,"Returns the last transaction's address of the transaction chain from the given address."),(0,r.kt)("h4",{id:"request-3"},"Request"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{"method": "getLastAddress", "params": {"hex": "0000..."}}\n')),(0,r.kt)("h4",{id:"response-3"},"Response:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{ "hex": "0000..."}\n')),(0,r.kt)("p",null,"If there is no transaction, it raises an error."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{"error": "not found"}\n')),(0,r.kt)("h3",{id:"getpreviousaddress-chain"},"getPreviousAddress (CHAIN)"),(0,r.kt)("p",null,"Returns the last transaction's address of the transaction chain from the given public key."),(0,r.kt)("h4",{id:"request-4"},"Request"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{"method": "getPreviousAddress", "params": {"hex": "0000..."}}\n')),(0,r.kt)("h4",{id:"response-4"},"Response:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{"ok": {"value": {"hex": "0000..."}}}\n')),(0,r.kt)("p",null,"If the public key in invalid or there is not previous addresse associated, it returns an error: "),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{"error": "invalid previous public key"}\n')),(0,r.kt)("h3",{id:"getgenesispublickey-chain"},"getGenesisPublicKey (CHAIN)"),(0,r.kt)("p",null,"Returns the genesis public key of the given public key."),(0,r.kt)("p",null,"If the public key is invalid, it raises an error."),(0,r.kt)("h4",{id:"request-5"},"Request"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{"method": "getGenesisPublicKey", "params": {"hex": "0000..."}}\n')),(0,r.kt)("h4",{id:"response-5"},"Response:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{ "ok": { "value": { "hex": "0000..."}} }\n')),(0,r.kt)("p",null,"If the public key doesn't exists, it returns an error."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{"error": "not found"}\n')),(0,r.kt)("h3",{id:"gettransaction-chain"},"getTransaction (CHAIN)"),(0,r.kt)("p",null,"Returns the transaction at the given address. "),(0,r.kt)("h4",{id:"request-6"},"Request"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{"method": "getTransaction", "params": {"hex": "0000..."}}\n')),(0,r.kt)("h4",{id:"response-6"},"Response:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{ \n  "ok": { \n    "value": {\n      "type": "...",\n      "data": {\n        "content": "",\n        "code": "",\n        "contract": {},\n        "ledger": {\n          "uco": { "transfers": [] },\n          "token": { "transfers": [] }\n        }\n      },\n    }\n  }\n}\n')),(0,r.kt)("p",null,"If there is no transaction at address, it raises an error."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{"error": "not found"}\n')),(0,r.kt)("h3",{id:"getlasttransaction-chain"},"getLastTransaction (CHAIN)"),(0,r.kt)("p",null,"Returns the latest transaction of the chain that contains the transaction's address"),(0,r.kt)("h4",{id:"request-7"},"Request"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{"method": "getLastTransaction", "params": {"hex": "0000..."}}\n')),(0,r.kt)("h4",{id:"response-7"},"Response:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{ \n  "ok": { \n    "value": {\n      "type": "...",\n      "data": {\n        "content": "",\n        "code": "",\n        "contract": {},\n        "ledger": {\n          "uco": { "transfers": [] },\n          "token": { "transfers": [] }\n        }\n      },\n    }\n  }\n}\n')),(0,r.kt)("p",null,"If there is no transaction at address, it raises an error."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{"error": "not found"}\n')),(0,r.kt)("h3",{id:"callfunction-contract"},"callFunction (CONTRACT)"),(0,r.kt)("p",null,"Calls the exported function of the Smart Contract at the given contract address with given args and return the result value."),(0,r.kt)("p",null,"It may return an error from the contract function execution."),(0,r.kt)("h4",{id:"request-8"},"Request"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "method": "callFunction", \n  "params": {\n    "address": {"hex": "0000..."},\n    "functionName": "function_name",\n    "args": []\n  }\n}\n')),(0,r.kt)("h4",{id:"response-8"},"Response"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{"ok": {\n  "value": ""\n}}\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{"error": ""}\n')),(0,r.kt)("h3",{id:"hmacwithstoragenonce-crypto"},"hmacWithStorageNonce (CRYPTO)"),(0,r.kt)("p",null,"Returns the HMAC of the given data using a hash function."),(0,r.kt)("p",null,"It uses a key created from the contract seed and secret data known by nodes (storage nonce).\nThe key created is deterministic and will always be the same for a contract."),(0,r.kt)("h4",{id:"request-9"},"Request"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsonc"},'{\n  "method": "hmacWithStorageNonce", \n  "params": {\n    "data": {"hex": data},\n    "hashFunction": 0 // SHA256\n  }\n}\n')),(0,r.kt)("h4",{id:"response-9"},"Response"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{"ok":{"value": {"hex": "..."}}}\n')),(0,r.kt)("p",null,"If the hash function is invalid, it returns an error:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{"error": "Invalid hash function"}\n')),(0,r.kt)("h3",{id:"signwithrecovery-crypto"},"signWithRecovery (CRYPTO)"),(0,r.kt)("p",null,"Return a signature of the given hash using ",(0,r.kt)("inlineCode",{parentName:"p"},"Secp256k1")," recovery key capability."),(0,r.kt)("p",null,"It uses a key created from the contract seed and secret data known by nodes (storage nonce).\nThe key created is deterministic and will always be the same for a contract."),(0,r.kt)("h4",{id:"request-10"},"Request"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{ "method": "signWithRecovery", "params": { "hex": data }}\n')),(0,r.kt)("h4",{id:"response-10"},"Response"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "ok": {\n    "value": {\n      "r": { "hex": "..."},\n      "s": { "hex": "..."},\n      "v": 27\n    }\n  }\n}\n')),(0,r.kt)("h3",{id:"decryptwithstoragenonce-crypto"},"decryptWithStorageNonce (CRYPTO)"),(0,r.kt)("p",null,"Return decrypted data from the given ciphertext using the storage nonce private key."),(0,r.kt)("h4",{id:"request-11"},"Request"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{"method": "decryptWithStorageNonce", "params": { "hex": "ciphertext"}}\n')),(0,r.kt)("h4",{id:"response-11"},"Response"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{ "ok": {"value": "clear data"}}\n')),(0,r.kt)("h3",{id:"request-http"},"request (HTTP)"),(0,r.kt)("p",null,"Performs a HTTP request and returns a map with status (integer) and body (string)."),(0,r.kt)("p",null,"This status integer can be any HTTP status code."),(0,r.kt)("h4",{id:"requirements"},"Requirements"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"The URL must use HTTPS protocol."),(0,r.kt)("li",{parentName:"ul"},"The response body's size must be less than 256KB."),(0,r.kt)("li",{parentName:"ul"},"The response must be received in less than 2 seconds."),(0,r.kt)("li",{parentName:"ul"},"The response must be idempotent (= identical every time it is called)"),(0,r.kt)("li",{parentName:"ul"},"Only 1 call is allowed per execution. ")),(0,r.kt)("admonition",{title:"Disclaimer",type:"danger"},(0,r.kt)("p",{parentName:"admonition"},"We discourage to call services that change their internal state directly (such as writing to a database or notifying a user). Because Archethic ",(0,r.kt)("strong",{parentName:"p"},"relies on atomic commitment of all storage nodes"),", it may happen that atomic commitment is not reached and the transaction resulting of a Smart Contract is not validated."),(0,r.kt)("p",{parentName:"admonition"},"Instead, you should notify the service of the transaction being validated. The service subscribes to that transaction via the GraphQL API, and once it receives a confirmation, it should act accordingly.")),(0,r.kt)("h4",{id:"request-12"},"Request"),(0,r.kt)("p",null,"Parameters:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"url")," the url to fetch"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"method")," the HTTP method (",(0,r.kt)("inlineCode",{parentName:"li"},'"GET"'),", ",(0,r.kt)("inlineCode",{parentName:"li"},'"POST"'),", ",(0,r.kt)("inlineCode",{parentName:"li"},'"PUT"'),", ",(0,r.kt)("inlineCode",{parentName:"li"},'"DELETE"')," or ",(0,r.kt)("inlineCode",{parentName:"li"},'"PATCH"'),")"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"headers")," the HTTP headers"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"body")," the HTTP body")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "method": "request", \n  "params": {\n    "body": body,\n    "headers": headers,\n    "method": method,\n    "uri": uri\n  }\n}\n')),(0,r.kt)("h4",{id:"response-12"},"Response"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "ok": {\n    "value": {\n      "status": 200,\n      "body": {}\n    }\n  }\n}\n')),(0,r.kt)("p",null,"The function raises if the requirements are not meet."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{"error": "..."}\n')),(0,r.kt)("h3",{id:"requestmany-http"},"requestMany (HTTP)"),(0,r.kt)("p",null,"Performs multiple HTTP requests and returns a list of map with status (integer) and body (string)."),(0,r.kt)("p",null,"See ",(0,r.kt)("a",{parentName:"p",href:"#request-http"},"request")," for more details"),(0,r.kt)("h4",{id:"request-13"},"Request"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "method": "requestMany", \n  "params": [\n    {\n      "body": body,\n      "headers": headers,\n      "method": method,\n      "uri": uri\n    }\n  ]\n}\n')),(0,r.kt)("h4",{id:"response-13"},"Response"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "ok": {\n    "value": [{\n      "status": 200,\n      "body": {}\n    }]\n  }\n}\n')),(0,r.kt)("p",null,"The function raises if the requirements are not meet."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{"error": "..."}\n')))}p.isMDXComponent=!0},8209:(e,t,n)=>{n(67294)}}]);